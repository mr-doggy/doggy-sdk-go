/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
)

// NotificationBodyType struct for NotificationBodyType
type NotificationBodyType struct {
}

// NewNotificationBodyType instantiates a new NotificationBodyType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationBodyType() *NotificationBodyType {
	this := NotificationBodyType{}
	return &this
}

// NewNotificationBodyTypeWithDefaults instantiates a new NotificationBodyType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationBodyTypeWithDefaults() *NotificationBodyType {
	this := NotificationBodyType{}
	return &this
}

func (o NotificationBodyType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	return json.Marshal(toSerialize)
}

type NullableNotificationBodyType struct {
	value *NotificationBodyType
	isSet bool
}

func (v NullableNotificationBodyType) Get() *NotificationBodyType {
	return v.value
}

func (v *NullableNotificationBodyType) Set(val *NotificationBodyType) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationBodyType) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationBodyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationBodyType(val *NotificationBodyType) *NullableNotificationBodyType {
	return &NullableNotificationBodyType{value: val, isSet: true}
}

func (v NullableNotificationBodyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationBodyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


