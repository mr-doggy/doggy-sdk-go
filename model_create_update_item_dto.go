/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"time"
)

// CreateUpdateItemDto struct for CreateUpdateItemDto
type CreateUpdateItemDto struct {
	Id NullableString `json:"id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	IsHidden *bool `json:"isHidden,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Password NullableString `json:"password,omitempty"`
	ParentId NullableString `json:"parentId,omitempty"`
	Key NullableString `json:"key,omitempty"`
	Md5 NullableString `json:"md5,omitempty"`
	SliceMd5 NullableString `json:"sliceMd5,omitempty"`
	RapidCode NullableString `json:"rapidCode,omitempty"`
	ContentType NullableString `json:"contentType,omitempty"`
	Type *ItemType `json:"type,omitempty"`
	DisplayStyle *DisplayStyle `json:"displayStyle,omitempty"`
	Extension NullableString `json:"extension,omitempty"`
	StorageClass NullableString `json:"storageClass,omitempty"`
	FileCreatedAt NullableTime `json:"fileCreatedAt,omitempty"`
	FileUpdatedAt NullableTime `json:"fileUpdatedAt,omitempty"`
	SyncVersion *int64 `json:"syncVersion,omitempty"`
	IsDeleted *bool `json:"isDeleted,omitempty"`
	DeletionTime NullableTime `json:"deletionTime,omitempty"`
	CreationTime *time.Time `json:"creationTime,omitempty"`
	LastModificationTime *time.Time `json:"lastModificationTime,omitempty"`
	Priority *Priority `json:"priority,omitempty"`
	StartAt NullableTime `json:"startAt,omitempty"`
	EndAt NullableTime `json:"endAt,omitempty"`
	NotifyAt NullableTime `json:"notifyAt,omitempty"`
	NotifyTimingType *TodoNotifyTimingType `json:"notifyTimingType,omitempty"`
	NotifyTimingUnit *TodoNotifyTimingUnit `json:"notifyTimingUnit,omitempty"`
	NotifyTimingValue *int32 `json:"notifyTimingValue,omitempty"`
	Repeat *TodoRepeat `json:"repeat,omitempty"`
	IsDone *bool `json:"isDone,omitempty"`
	DoneAt NullableTime `json:"doneAt,omitempty"`
}

// NewCreateUpdateItemDto instantiates a new CreateUpdateItemDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUpdateItemDto() *CreateUpdateItemDto {
	this := CreateUpdateItemDto{}
	return &this
}

// NewCreateUpdateItemDtoWithDefaults instantiates a new CreateUpdateItemDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUpdateItemDtoWithDefaults() *CreateUpdateItemDto {
	this := CreateUpdateItemDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CreateUpdateItemDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CreateUpdateItemDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CreateUpdateItemDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CreateUpdateItemDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetName() {
	o.Name.Unset()
}

// GetIsHidden returns the IsHidden field value if set, zero value otherwise.
func (o *CreateUpdateItemDto) GetIsHidden() bool {
	if o == nil || o.IsHidden == nil {
		var ret bool
		return ret
	}
	return *o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateItemDto) GetIsHiddenOk() (*bool, bool) {
	if o == nil || o.IsHidden == nil {
		return nil, false
	}
	return o.IsHidden, true
}

// HasIsHidden returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasIsHidden() bool {
	if o != nil && o.IsHidden != nil {
		return true
	}

	return false
}

// SetIsHidden gets a reference to the given bool and assigns it to the IsHidden field.
func (o *CreateUpdateItemDto) SetIsHidden(v bool) {
	o.IsHidden = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CreateUpdateItemDto) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CreateUpdateItemDto) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetDescription() {
	o.Description.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *CreateUpdateItemDto) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *CreateUpdateItemDto) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetPassword() {
	o.Password.Unset()
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetParentId() string {
	if o == nil || o.ParentId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetParentIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableString and assigns it to the ParentId field.
func (o *CreateUpdateItemDto) SetParentId(v string) {
	o.ParentId.Set(&v)
}
// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *CreateUpdateItemDto) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetParentId() {
	o.ParentId.Unset()
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetKey() string {
	if o == nil || o.Key.Get() == nil {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *CreateUpdateItemDto) SetKey(v string) {
	o.Key.Set(&v)
}
// SetKeyNil sets the value for Key to be an explicit nil
func (o *CreateUpdateItemDto) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetKey() {
	o.Key.Unset()
}

// GetMd5 returns the Md5 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetMd5() string {
	if o == nil || o.Md5.Get() == nil {
		var ret string
		return ret
	}
	return *o.Md5.Get()
}

// GetMd5Ok returns a tuple with the Md5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetMd5Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Md5.Get(), o.Md5.IsSet()
}

// HasMd5 returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasMd5() bool {
	if o != nil && o.Md5.IsSet() {
		return true
	}

	return false
}

// SetMd5 gets a reference to the given NullableString and assigns it to the Md5 field.
func (o *CreateUpdateItemDto) SetMd5(v string) {
	o.Md5.Set(&v)
}
// SetMd5Nil sets the value for Md5 to be an explicit nil
func (o *CreateUpdateItemDto) SetMd5Nil() {
	o.Md5.Set(nil)
}

// UnsetMd5 ensures that no value is present for Md5, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetMd5() {
	o.Md5.Unset()
}

// GetSliceMd5 returns the SliceMd5 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetSliceMd5() string {
	if o == nil || o.SliceMd5.Get() == nil {
		var ret string
		return ret
	}
	return *o.SliceMd5.Get()
}

// GetSliceMd5Ok returns a tuple with the SliceMd5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetSliceMd5Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SliceMd5.Get(), o.SliceMd5.IsSet()
}

// HasSliceMd5 returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasSliceMd5() bool {
	if o != nil && o.SliceMd5.IsSet() {
		return true
	}

	return false
}

// SetSliceMd5 gets a reference to the given NullableString and assigns it to the SliceMd5 field.
func (o *CreateUpdateItemDto) SetSliceMd5(v string) {
	o.SliceMd5.Set(&v)
}
// SetSliceMd5Nil sets the value for SliceMd5 to be an explicit nil
func (o *CreateUpdateItemDto) SetSliceMd5Nil() {
	o.SliceMd5.Set(nil)
}

// UnsetSliceMd5 ensures that no value is present for SliceMd5, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetSliceMd5() {
	o.SliceMd5.Unset()
}

// GetRapidCode returns the RapidCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetRapidCode() string {
	if o == nil || o.RapidCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.RapidCode.Get()
}

// GetRapidCodeOk returns a tuple with the RapidCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetRapidCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RapidCode.Get(), o.RapidCode.IsSet()
}

// HasRapidCode returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasRapidCode() bool {
	if o != nil && o.RapidCode.IsSet() {
		return true
	}

	return false
}

// SetRapidCode gets a reference to the given NullableString and assigns it to the RapidCode field.
func (o *CreateUpdateItemDto) SetRapidCode(v string) {
	o.RapidCode.Set(&v)
}
// SetRapidCodeNil sets the value for RapidCode to be an explicit nil
func (o *CreateUpdateItemDto) SetRapidCodeNil() {
	o.RapidCode.Set(nil)
}

// UnsetRapidCode ensures that no value is present for RapidCode, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetRapidCode() {
	o.RapidCode.Unset()
}

// GetContentType returns the ContentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetContentType() string {
	if o == nil || o.ContentType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ContentType.Get()
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetContentTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContentType.Get(), o.ContentType.IsSet()
}

// HasContentType returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasContentType() bool {
	if o != nil && o.ContentType.IsSet() {
		return true
	}

	return false
}

// SetContentType gets a reference to the given NullableString and assigns it to the ContentType field.
func (o *CreateUpdateItemDto) SetContentType(v string) {
	o.ContentType.Set(&v)
}
// SetContentTypeNil sets the value for ContentType to be an explicit nil
func (o *CreateUpdateItemDto) SetContentTypeNil() {
	o.ContentType.Set(nil)
}

// UnsetContentType ensures that no value is present for ContentType, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetContentType() {
	o.ContentType.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreateUpdateItemDto) GetType() ItemType {
	if o == nil || o.Type == nil {
		var ret ItemType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateItemDto) GetTypeOk() (*ItemType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given ItemType and assigns it to the Type field.
func (o *CreateUpdateItemDto) SetType(v ItemType) {
	o.Type = &v
}

// GetDisplayStyle returns the DisplayStyle field value if set, zero value otherwise.
func (o *CreateUpdateItemDto) GetDisplayStyle() DisplayStyle {
	if o == nil || o.DisplayStyle == nil {
		var ret DisplayStyle
		return ret
	}
	return *o.DisplayStyle
}

// GetDisplayStyleOk returns a tuple with the DisplayStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateItemDto) GetDisplayStyleOk() (*DisplayStyle, bool) {
	if o == nil || o.DisplayStyle == nil {
		return nil, false
	}
	return o.DisplayStyle, true
}

// HasDisplayStyle returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasDisplayStyle() bool {
	if o != nil && o.DisplayStyle != nil {
		return true
	}

	return false
}

// SetDisplayStyle gets a reference to the given DisplayStyle and assigns it to the DisplayStyle field.
func (o *CreateUpdateItemDto) SetDisplayStyle(v DisplayStyle) {
	o.DisplayStyle = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetExtension() string {
	if o == nil || o.Extension.Get() == nil {
		var ret string
		return ret
	}
	return *o.Extension.Get()
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetExtensionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Extension.Get(), o.Extension.IsSet()
}

// HasExtension returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasExtension() bool {
	if o != nil && o.Extension.IsSet() {
		return true
	}

	return false
}

// SetExtension gets a reference to the given NullableString and assigns it to the Extension field.
func (o *CreateUpdateItemDto) SetExtension(v string) {
	o.Extension.Set(&v)
}
// SetExtensionNil sets the value for Extension to be an explicit nil
func (o *CreateUpdateItemDto) SetExtensionNil() {
	o.Extension.Set(nil)
}

// UnsetExtension ensures that no value is present for Extension, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetExtension() {
	o.Extension.Unset()
}

// GetStorageClass returns the StorageClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetStorageClass() string {
	if o == nil || o.StorageClass.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageClass.Get()
}

// GetStorageClassOk returns a tuple with the StorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetStorageClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageClass.Get(), o.StorageClass.IsSet()
}

// HasStorageClass returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasStorageClass() bool {
	if o != nil && o.StorageClass.IsSet() {
		return true
	}

	return false
}

// SetStorageClass gets a reference to the given NullableString and assigns it to the StorageClass field.
func (o *CreateUpdateItemDto) SetStorageClass(v string) {
	o.StorageClass.Set(&v)
}
// SetStorageClassNil sets the value for StorageClass to be an explicit nil
func (o *CreateUpdateItemDto) SetStorageClassNil() {
	o.StorageClass.Set(nil)
}

// UnsetStorageClass ensures that no value is present for StorageClass, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetStorageClass() {
	o.StorageClass.Unset()
}

// GetFileCreatedAt returns the FileCreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetFileCreatedAt() time.Time {
	if o == nil || o.FileCreatedAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.FileCreatedAt.Get()
}

// GetFileCreatedAtOk returns a tuple with the FileCreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetFileCreatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileCreatedAt.Get(), o.FileCreatedAt.IsSet()
}

// HasFileCreatedAt returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasFileCreatedAt() bool {
	if o != nil && o.FileCreatedAt.IsSet() {
		return true
	}

	return false
}

// SetFileCreatedAt gets a reference to the given NullableTime and assigns it to the FileCreatedAt field.
func (o *CreateUpdateItemDto) SetFileCreatedAt(v time.Time) {
	o.FileCreatedAt.Set(&v)
}
// SetFileCreatedAtNil sets the value for FileCreatedAt to be an explicit nil
func (o *CreateUpdateItemDto) SetFileCreatedAtNil() {
	o.FileCreatedAt.Set(nil)
}

// UnsetFileCreatedAt ensures that no value is present for FileCreatedAt, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetFileCreatedAt() {
	o.FileCreatedAt.Unset()
}

// GetFileUpdatedAt returns the FileUpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetFileUpdatedAt() time.Time {
	if o == nil || o.FileUpdatedAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.FileUpdatedAt.Get()
}

// GetFileUpdatedAtOk returns a tuple with the FileUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetFileUpdatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileUpdatedAt.Get(), o.FileUpdatedAt.IsSet()
}

// HasFileUpdatedAt returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasFileUpdatedAt() bool {
	if o != nil && o.FileUpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetFileUpdatedAt gets a reference to the given NullableTime and assigns it to the FileUpdatedAt field.
func (o *CreateUpdateItemDto) SetFileUpdatedAt(v time.Time) {
	o.FileUpdatedAt.Set(&v)
}
// SetFileUpdatedAtNil sets the value for FileUpdatedAt to be an explicit nil
func (o *CreateUpdateItemDto) SetFileUpdatedAtNil() {
	o.FileUpdatedAt.Set(nil)
}

// UnsetFileUpdatedAt ensures that no value is present for FileUpdatedAt, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetFileUpdatedAt() {
	o.FileUpdatedAt.Unset()
}

// GetSyncVersion returns the SyncVersion field value if set, zero value otherwise.
func (o *CreateUpdateItemDto) GetSyncVersion() int64 {
	if o == nil || o.SyncVersion == nil {
		var ret int64
		return ret
	}
	return *o.SyncVersion
}

// GetSyncVersionOk returns a tuple with the SyncVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateItemDto) GetSyncVersionOk() (*int64, bool) {
	if o == nil || o.SyncVersion == nil {
		return nil, false
	}
	return o.SyncVersion, true
}

// HasSyncVersion returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasSyncVersion() bool {
	if o != nil && o.SyncVersion != nil {
		return true
	}

	return false
}

// SetSyncVersion gets a reference to the given int64 and assigns it to the SyncVersion field.
func (o *CreateUpdateItemDto) SetSyncVersion(v int64) {
	o.SyncVersion = &v
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *CreateUpdateItemDto) GetIsDeleted() bool {
	if o == nil || o.IsDeleted == nil {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateItemDto) GetIsDeletedOk() (*bool, bool) {
	if o == nil || o.IsDeleted == nil {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasIsDeleted() bool {
	if o != nil && o.IsDeleted != nil {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *CreateUpdateItemDto) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetDeletionTime returns the DeletionTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetDeletionTime() time.Time {
	if o == nil || o.DeletionTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.DeletionTime.Get()
}

// GetDeletionTimeOk returns a tuple with the DeletionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetDeletionTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeletionTime.Get(), o.DeletionTime.IsSet()
}

// HasDeletionTime returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasDeletionTime() bool {
	if o != nil && o.DeletionTime.IsSet() {
		return true
	}

	return false
}

// SetDeletionTime gets a reference to the given NullableTime and assigns it to the DeletionTime field.
func (o *CreateUpdateItemDto) SetDeletionTime(v time.Time) {
	o.DeletionTime.Set(&v)
}
// SetDeletionTimeNil sets the value for DeletionTime to be an explicit nil
func (o *CreateUpdateItemDto) SetDeletionTimeNil() {
	o.DeletionTime.Set(nil)
}

// UnsetDeletionTime ensures that no value is present for DeletionTime, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetDeletionTime() {
	o.DeletionTime.Unset()
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *CreateUpdateItemDto) GetCreationTime() time.Time {
	if o == nil || o.CreationTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateItemDto) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || o.CreationTime == nil {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasCreationTime() bool {
	if o != nil && o.CreationTime != nil {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *CreateUpdateItemDto) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetLastModificationTime returns the LastModificationTime field value if set, zero value otherwise.
func (o *CreateUpdateItemDto) GetLastModificationTime() time.Time {
	if o == nil || o.LastModificationTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastModificationTime
}

// GetLastModificationTimeOk returns a tuple with the LastModificationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateItemDto) GetLastModificationTimeOk() (*time.Time, bool) {
	if o == nil || o.LastModificationTime == nil {
		return nil, false
	}
	return o.LastModificationTime, true
}

// HasLastModificationTime returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasLastModificationTime() bool {
	if o != nil && o.LastModificationTime != nil {
		return true
	}

	return false
}

// SetLastModificationTime gets a reference to the given time.Time and assigns it to the LastModificationTime field.
func (o *CreateUpdateItemDto) SetLastModificationTime(v time.Time) {
	o.LastModificationTime = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *CreateUpdateItemDto) GetPriority() Priority {
	if o == nil || o.Priority == nil {
		var ret Priority
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateItemDto) GetPriorityOk() (*Priority, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given Priority and assigns it to the Priority field.
func (o *CreateUpdateItemDto) SetPriority(v Priority) {
	o.Priority = &v
}

// GetStartAt returns the StartAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetStartAt() time.Time {
	if o == nil || o.StartAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StartAt.Get()
}

// GetStartAtOk returns a tuple with the StartAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetStartAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartAt.Get(), o.StartAt.IsSet()
}

// HasStartAt returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasStartAt() bool {
	if o != nil && o.StartAt.IsSet() {
		return true
	}

	return false
}

// SetStartAt gets a reference to the given NullableTime and assigns it to the StartAt field.
func (o *CreateUpdateItemDto) SetStartAt(v time.Time) {
	o.StartAt.Set(&v)
}
// SetStartAtNil sets the value for StartAt to be an explicit nil
func (o *CreateUpdateItemDto) SetStartAtNil() {
	o.StartAt.Set(nil)
}

// UnsetStartAt ensures that no value is present for StartAt, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetStartAt() {
	o.StartAt.Unset()
}

// GetEndAt returns the EndAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetEndAt() time.Time {
	if o == nil || o.EndAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.EndAt.Get()
}

// GetEndAtOk returns a tuple with the EndAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetEndAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndAt.Get(), o.EndAt.IsSet()
}

// HasEndAt returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasEndAt() bool {
	if o != nil && o.EndAt.IsSet() {
		return true
	}

	return false
}

// SetEndAt gets a reference to the given NullableTime and assigns it to the EndAt field.
func (o *CreateUpdateItemDto) SetEndAt(v time.Time) {
	o.EndAt.Set(&v)
}
// SetEndAtNil sets the value for EndAt to be an explicit nil
func (o *CreateUpdateItemDto) SetEndAtNil() {
	o.EndAt.Set(nil)
}

// UnsetEndAt ensures that no value is present for EndAt, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetEndAt() {
	o.EndAt.Unset()
}

// GetNotifyAt returns the NotifyAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetNotifyAt() time.Time {
	if o == nil || o.NotifyAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.NotifyAt.Get()
}

// GetNotifyAtOk returns a tuple with the NotifyAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetNotifyAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NotifyAt.Get(), o.NotifyAt.IsSet()
}

// HasNotifyAt returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasNotifyAt() bool {
	if o != nil && o.NotifyAt.IsSet() {
		return true
	}

	return false
}

// SetNotifyAt gets a reference to the given NullableTime and assigns it to the NotifyAt field.
func (o *CreateUpdateItemDto) SetNotifyAt(v time.Time) {
	o.NotifyAt.Set(&v)
}
// SetNotifyAtNil sets the value for NotifyAt to be an explicit nil
func (o *CreateUpdateItemDto) SetNotifyAtNil() {
	o.NotifyAt.Set(nil)
}

// UnsetNotifyAt ensures that no value is present for NotifyAt, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetNotifyAt() {
	o.NotifyAt.Unset()
}

// GetNotifyTimingType returns the NotifyTimingType field value if set, zero value otherwise.
func (o *CreateUpdateItemDto) GetNotifyTimingType() TodoNotifyTimingType {
	if o == nil || o.NotifyTimingType == nil {
		var ret TodoNotifyTimingType
		return ret
	}
	return *o.NotifyTimingType
}

// GetNotifyTimingTypeOk returns a tuple with the NotifyTimingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateItemDto) GetNotifyTimingTypeOk() (*TodoNotifyTimingType, bool) {
	if o == nil || o.NotifyTimingType == nil {
		return nil, false
	}
	return o.NotifyTimingType, true
}

// HasNotifyTimingType returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasNotifyTimingType() bool {
	if o != nil && o.NotifyTimingType != nil {
		return true
	}

	return false
}

// SetNotifyTimingType gets a reference to the given TodoNotifyTimingType and assigns it to the NotifyTimingType field.
func (o *CreateUpdateItemDto) SetNotifyTimingType(v TodoNotifyTimingType) {
	o.NotifyTimingType = &v
}

// GetNotifyTimingUnit returns the NotifyTimingUnit field value if set, zero value otherwise.
func (o *CreateUpdateItemDto) GetNotifyTimingUnit() TodoNotifyTimingUnit {
	if o == nil || o.NotifyTimingUnit == nil {
		var ret TodoNotifyTimingUnit
		return ret
	}
	return *o.NotifyTimingUnit
}

// GetNotifyTimingUnitOk returns a tuple with the NotifyTimingUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateItemDto) GetNotifyTimingUnitOk() (*TodoNotifyTimingUnit, bool) {
	if o == nil || o.NotifyTimingUnit == nil {
		return nil, false
	}
	return o.NotifyTimingUnit, true
}

// HasNotifyTimingUnit returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasNotifyTimingUnit() bool {
	if o != nil && o.NotifyTimingUnit != nil {
		return true
	}

	return false
}

// SetNotifyTimingUnit gets a reference to the given TodoNotifyTimingUnit and assigns it to the NotifyTimingUnit field.
func (o *CreateUpdateItemDto) SetNotifyTimingUnit(v TodoNotifyTimingUnit) {
	o.NotifyTimingUnit = &v
}

// GetNotifyTimingValue returns the NotifyTimingValue field value if set, zero value otherwise.
func (o *CreateUpdateItemDto) GetNotifyTimingValue() int32 {
	if o == nil || o.NotifyTimingValue == nil {
		var ret int32
		return ret
	}
	return *o.NotifyTimingValue
}

// GetNotifyTimingValueOk returns a tuple with the NotifyTimingValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateItemDto) GetNotifyTimingValueOk() (*int32, bool) {
	if o == nil || o.NotifyTimingValue == nil {
		return nil, false
	}
	return o.NotifyTimingValue, true
}

// HasNotifyTimingValue returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasNotifyTimingValue() bool {
	if o != nil && o.NotifyTimingValue != nil {
		return true
	}

	return false
}

// SetNotifyTimingValue gets a reference to the given int32 and assigns it to the NotifyTimingValue field.
func (o *CreateUpdateItemDto) SetNotifyTimingValue(v int32) {
	o.NotifyTimingValue = &v
}

// GetRepeat returns the Repeat field value if set, zero value otherwise.
func (o *CreateUpdateItemDto) GetRepeat() TodoRepeat {
	if o == nil || o.Repeat == nil {
		var ret TodoRepeat
		return ret
	}
	return *o.Repeat
}

// GetRepeatOk returns a tuple with the Repeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateItemDto) GetRepeatOk() (*TodoRepeat, bool) {
	if o == nil || o.Repeat == nil {
		return nil, false
	}
	return o.Repeat, true
}

// HasRepeat returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasRepeat() bool {
	if o != nil && o.Repeat != nil {
		return true
	}

	return false
}

// SetRepeat gets a reference to the given TodoRepeat and assigns it to the Repeat field.
func (o *CreateUpdateItemDto) SetRepeat(v TodoRepeat) {
	o.Repeat = &v
}

// GetIsDone returns the IsDone field value if set, zero value otherwise.
func (o *CreateUpdateItemDto) GetIsDone() bool {
	if o == nil || o.IsDone == nil {
		var ret bool
		return ret
	}
	return *o.IsDone
}

// GetIsDoneOk returns a tuple with the IsDone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateItemDto) GetIsDoneOk() (*bool, bool) {
	if o == nil || o.IsDone == nil {
		return nil, false
	}
	return o.IsDone, true
}

// HasIsDone returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasIsDone() bool {
	if o != nil && o.IsDone != nil {
		return true
	}

	return false
}

// SetIsDone gets a reference to the given bool and assigns it to the IsDone field.
func (o *CreateUpdateItemDto) SetIsDone(v bool) {
	o.IsDone = &v
}

// GetDoneAt returns the DoneAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetDoneAt() time.Time {
	if o == nil || o.DoneAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.DoneAt.Get()
}

// GetDoneAtOk returns a tuple with the DoneAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetDoneAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DoneAt.Get(), o.DoneAt.IsSet()
}

// HasDoneAt returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasDoneAt() bool {
	if o != nil && o.DoneAt.IsSet() {
		return true
	}

	return false
}

// SetDoneAt gets a reference to the given NullableTime and assigns it to the DoneAt field.
func (o *CreateUpdateItemDto) SetDoneAt(v time.Time) {
	o.DoneAt.Set(&v)
}
// SetDoneAtNil sets the value for DoneAt to be an explicit nil
func (o *CreateUpdateItemDto) SetDoneAtNil() {
	o.DoneAt.Set(nil)
}

// UnsetDoneAt ensures that no value is present for DoneAt, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetDoneAt() {
	o.DoneAt.Unset()
}

func (o CreateUpdateItemDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.IsHidden != nil {
		toSerialize["isHidden"] = o.IsHidden
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.ParentId.IsSet() {
		toSerialize["parentId"] = o.ParentId.Get()
	}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	if o.Md5.IsSet() {
		toSerialize["md5"] = o.Md5.Get()
	}
	if o.SliceMd5.IsSet() {
		toSerialize["sliceMd5"] = o.SliceMd5.Get()
	}
	if o.RapidCode.IsSet() {
		toSerialize["rapidCode"] = o.RapidCode.Get()
	}
	if o.ContentType.IsSet() {
		toSerialize["contentType"] = o.ContentType.Get()
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.DisplayStyle != nil {
		toSerialize["displayStyle"] = o.DisplayStyle
	}
	if o.Extension.IsSet() {
		toSerialize["extension"] = o.Extension.Get()
	}
	if o.StorageClass.IsSet() {
		toSerialize["storageClass"] = o.StorageClass.Get()
	}
	if o.FileCreatedAt.IsSet() {
		toSerialize["fileCreatedAt"] = o.FileCreatedAt.Get()
	}
	if o.FileUpdatedAt.IsSet() {
		toSerialize["fileUpdatedAt"] = o.FileUpdatedAt.Get()
	}
	if o.SyncVersion != nil {
		toSerialize["syncVersion"] = o.SyncVersion
	}
	if o.IsDeleted != nil {
		toSerialize["isDeleted"] = o.IsDeleted
	}
	if o.DeletionTime.IsSet() {
		toSerialize["deletionTime"] = o.DeletionTime.Get()
	}
	if o.CreationTime != nil {
		toSerialize["creationTime"] = o.CreationTime
	}
	if o.LastModificationTime != nil {
		toSerialize["lastModificationTime"] = o.LastModificationTime
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if o.StartAt.IsSet() {
		toSerialize["startAt"] = o.StartAt.Get()
	}
	if o.EndAt.IsSet() {
		toSerialize["endAt"] = o.EndAt.Get()
	}
	if o.NotifyAt.IsSet() {
		toSerialize["notifyAt"] = o.NotifyAt.Get()
	}
	if o.NotifyTimingType != nil {
		toSerialize["notifyTimingType"] = o.NotifyTimingType
	}
	if o.NotifyTimingUnit != nil {
		toSerialize["notifyTimingUnit"] = o.NotifyTimingUnit
	}
	if o.NotifyTimingValue != nil {
		toSerialize["notifyTimingValue"] = o.NotifyTimingValue
	}
	if o.Repeat != nil {
		toSerialize["repeat"] = o.Repeat
	}
	if o.IsDone != nil {
		toSerialize["isDone"] = o.IsDone
	}
	if o.DoneAt.IsSet() {
		toSerialize["doneAt"] = o.DoneAt.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateUpdateItemDto struct {
	value *CreateUpdateItemDto
	isSet bool
}

func (v NullableCreateUpdateItemDto) Get() *CreateUpdateItemDto {
	return v.value
}

func (v *NullableCreateUpdateItemDto) Set(val *CreateUpdateItemDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUpdateItemDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUpdateItemDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUpdateItemDto(val *CreateUpdateItemDto) *NullableCreateUpdateItemDto {
	return &NullableCreateUpdateItemDto{value: val, isSet: true}
}

func (v NullableCreateUpdateItemDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUpdateItemDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


