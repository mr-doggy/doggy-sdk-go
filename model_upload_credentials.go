/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
)

// UploadCredentials struct for UploadCredentials
type UploadCredentials struct {
	StorageClass NullableString `json:"storageClass,omitempty"`
	EndPoint NullableString `json:"endPoint,omitempty"`
	Protocal NullableString `json:"protocal,omitempty"`
	BucketName NullableString `json:"bucketName,omitempty"`
	RegionId NullableString `json:"regionId,omitempty"`
	SecurityToken NullableString `json:"securityToken,omitempty"`
	AccessKeyId NullableString `json:"accessKeyId,omitempty"`
	AccessKeySecret NullableString `json:"accessKeySecret,omitempty"`
	Expiration NullableString `json:"expiration,omitempty"`
	ExpiredTime *int64 `json:"expiredTime,omitempty"`
	AppId NullableString `json:"appId,omitempty"`
}

// NewUploadCredentials instantiates a new UploadCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadCredentials() *UploadCredentials {
	this := UploadCredentials{}
	return &this
}

// NewUploadCredentialsWithDefaults instantiates a new UploadCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadCredentialsWithDefaults() *UploadCredentials {
	this := UploadCredentials{}
	return &this
}

// GetStorageClass returns the StorageClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadCredentials) GetStorageClass() string {
	if o == nil || o.StorageClass.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageClass.Get()
}

// GetStorageClassOk returns a tuple with the StorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadCredentials) GetStorageClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageClass.Get(), o.StorageClass.IsSet()
}

// HasStorageClass returns a boolean if a field has been set.
func (o *UploadCredentials) HasStorageClass() bool {
	if o != nil && o.StorageClass.IsSet() {
		return true
	}

	return false
}

// SetStorageClass gets a reference to the given NullableString and assigns it to the StorageClass field.
func (o *UploadCredentials) SetStorageClass(v string) {
	o.StorageClass.Set(&v)
}
// SetStorageClassNil sets the value for StorageClass to be an explicit nil
func (o *UploadCredentials) SetStorageClassNil() {
	o.StorageClass.Set(nil)
}

// UnsetStorageClass ensures that no value is present for StorageClass, not even an explicit nil
func (o *UploadCredentials) UnsetStorageClass() {
	o.StorageClass.Unset()
}

// GetEndPoint returns the EndPoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadCredentials) GetEndPoint() string {
	if o == nil || o.EndPoint.Get() == nil {
		var ret string
		return ret
	}
	return *o.EndPoint.Get()
}

// GetEndPointOk returns a tuple with the EndPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadCredentials) GetEndPointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndPoint.Get(), o.EndPoint.IsSet()
}

// HasEndPoint returns a boolean if a field has been set.
func (o *UploadCredentials) HasEndPoint() bool {
	if o != nil && o.EndPoint.IsSet() {
		return true
	}

	return false
}

// SetEndPoint gets a reference to the given NullableString and assigns it to the EndPoint field.
func (o *UploadCredentials) SetEndPoint(v string) {
	o.EndPoint.Set(&v)
}
// SetEndPointNil sets the value for EndPoint to be an explicit nil
func (o *UploadCredentials) SetEndPointNil() {
	o.EndPoint.Set(nil)
}

// UnsetEndPoint ensures that no value is present for EndPoint, not even an explicit nil
func (o *UploadCredentials) UnsetEndPoint() {
	o.EndPoint.Unset()
}

// GetProtocal returns the Protocal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadCredentials) GetProtocal() string {
	if o == nil || o.Protocal.Get() == nil {
		var ret string
		return ret
	}
	return *o.Protocal.Get()
}

// GetProtocalOk returns a tuple with the Protocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadCredentials) GetProtocalOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Protocal.Get(), o.Protocal.IsSet()
}

// HasProtocal returns a boolean if a field has been set.
func (o *UploadCredentials) HasProtocal() bool {
	if o != nil && o.Protocal.IsSet() {
		return true
	}

	return false
}

// SetProtocal gets a reference to the given NullableString and assigns it to the Protocal field.
func (o *UploadCredentials) SetProtocal(v string) {
	o.Protocal.Set(&v)
}
// SetProtocalNil sets the value for Protocal to be an explicit nil
func (o *UploadCredentials) SetProtocalNil() {
	o.Protocal.Set(nil)
}

// UnsetProtocal ensures that no value is present for Protocal, not even an explicit nil
func (o *UploadCredentials) UnsetProtocal() {
	o.Protocal.Unset()
}

// GetBucketName returns the BucketName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadCredentials) GetBucketName() string {
	if o == nil || o.BucketName.Get() == nil {
		var ret string
		return ret
	}
	return *o.BucketName.Get()
}

// GetBucketNameOk returns a tuple with the BucketName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadCredentials) GetBucketNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BucketName.Get(), o.BucketName.IsSet()
}

// HasBucketName returns a boolean if a field has been set.
func (o *UploadCredentials) HasBucketName() bool {
	if o != nil && o.BucketName.IsSet() {
		return true
	}

	return false
}

// SetBucketName gets a reference to the given NullableString and assigns it to the BucketName field.
func (o *UploadCredentials) SetBucketName(v string) {
	o.BucketName.Set(&v)
}
// SetBucketNameNil sets the value for BucketName to be an explicit nil
func (o *UploadCredentials) SetBucketNameNil() {
	o.BucketName.Set(nil)
}

// UnsetBucketName ensures that no value is present for BucketName, not even an explicit nil
func (o *UploadCredentials) UnsetBucketName() {
	o.BucketName.Unset()
}

// GetRegionId returns the RegionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadCredentials) GetRegionId() string {
	if o == nil || o.RegionId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RegionId.Get()
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadCredentials) GetRegionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegionId.Get(), o.RegionId.IsSet()
}

// HasRegionId returns a boolean if a field has been set.
func (o *UploadCredentials) HasRegionId() bool {
	if o != nil && o.RegionId.IsSet() {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given NullableString and assigns it to the RegionId field.
func (o *UploadCredentials) SetRegionId(v string) {
	o.RegionId.Set(&v)
}
// SetRegionIdNil sets the value for RegionId to be an explicit nil
func (o *UploadCredentials) SetRegionIdNil() {
	o.RegionId.Set(nil)
}

// UnsetRegionId ensures that no value is present for RegionId, not even an explicit nil
func (o *UploadCredentials) UnsetRegionId() {
	o.RegionId.Unset()
}

// GetSecurityToken returns the SecurityToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadCredentials) GetSecurityToken() string {
	if o == nil || o.SecurityToken.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecurityToken.Get()
}

// GetSecurityTokenOk returns a tuple with the SecurityToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadCredentials) GetSecurityTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecurityToken.Get(), o.SecurityToken.IsSet()
}

// HasSecurityToken returns a boolean if a field has been set.
func (o *UploadCredentials) HasSecurityToken() bool {
	if o != nil && o.SecurityToken.IsSet() {
		return true
	}

	return false
}

// SetSecurityToken gets a reference to the given NullableString and assigns it to the SecurityToken field.
func (o *UploadCredentials) SetSecurityToken(v string) {
	o.SecurityToken.Set(&v)
}
// SetSecurityTokenNil sets the value for SecurityToken to be an explicit nil
func (o *UploadCredentials) SetSecurityTokenNil() {
	o.SecurityToken.Set(nil)
}

// UnsetSecurityToken ensures that no value is present for SecurityToken, not even an explicit nil
func (o *UploadCredentials) UnsetSecurityToken() {
	o.SecurityToken.Unset()
}

// GetAccessKeyId returns the AccessKeyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadCredentials) GetAccessKeyId() string {
	if o == nil || o.AccessKeyId.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccessKeyId.Get()
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadCredentials) GetAccessKeyIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccessKeyId.Get(), o.AccessKeyId.IsSet()
}

// HasAccessKeyId returns a boolean if a field has been set.
func (o *UploadCredentials) HasAccessKeyId() bool {
	if o != nil && o.AccessKeyId.IsSet() {
		return true
	}

	return false
}

// SetAccessKeyId gets a reference to the given NullableString and assigns it to the AccessKeyId field.
func (o *UploadCredentials) SetAccessKeyId(v string) {
	o.AccessKeyId.Set(&v)
}
// SetAccessKeyIdNil sets the value for AccessKeyId to be an explicit nil
func (o *UploadCredentials) SetAccessKeyIdNil() {
	o.AccessKeyId.Set(nil)
}

// UnsetAccessKeyId ensures that no value is present for AccessKeyId, not even an explicit nil
func (o *UploadCredentials) UnsetAccessKeyId() {
	o.AccessKeyId.Unset()
}

// GetAccessKeySecret returns the AccessKeySecret field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadCredentials) GetAccessKeySecret() string {
	if o == nil || o.AccessKeySecret.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccessKeySecret.Get()
}

// GetAccessKeySecretOk returns a tuple with the AccessKeySecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadCredentials) GetAccessKeySecretOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccessKeySecret.Get(), o.AccessKeySecret.IsSet()
}

// HasAccessKeySecret returns a boolean if a field has been set.
func (o *UploadCredentials) HasAccessKeySecret() bool {
	if o != nil && o.AccessKeySecret.IsSet() {
		return true
	}

	return false
}

// SetAccessKeySecret gets a reference to the given NullableString and assigns it to the AccessKeySecret field.
func (o *UploadCredentials) SetAccessKeySecret(v string) {
	o.AccessKeySecret.Set(&v)
}
// SetAccessKeySecretNil sets the value for AccessKeySecret to be an explicit nil
func (o *UploadCredentials) SetAccessKeySecretNil() {
	o.AccessKeySecret.Set(nil)
}

// UnsetAccessKeySecret ensures that no value is present for AccessKeySecret, not even an explicit nil
func (o *UploadCredentials) UnsetAccessKeySecret() {
	o.AccessKeySecret.Unset()
}

// GetExpiration returns the Expiration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadCredentials) GetExpiration() string {
	if o == nil || o.Expiration.Get() == nil {
		var ret string
		return ret
	}
	return *o.Expiration.Get()
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadCredentials) GetExpirationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Expiration.Get(), o.Expiration.IsSet()
}

// HasExpiration returns a boolean if a field has been set.
func (o *UploadCredentials) HasExpiration() bool {
	if o != nil && o.Expiration.IsSet() {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given NullableString and assigns it to the Expiration field.
func (o *UploadCredentials) SetExpiration(v string) {
	o.Expiration.Set(&v)
}
// SetExpirationNil sets the value for Expiration to be an explicit nil
func (o *UploadCredentials) SetExpirationNil() {
	o.Expiration.Set(nil)
}

// UnsetExpiration ensures that no value is present for Expiration, not even an explicit nil
func (o *UploadCredentials) UnsetExpiration() {
	o.Expiration.Unset()
}

// GetExpiredTime returns the ExpiredTime field value if set, zero value otherwise.
func (o *UploadCredentials) GetExpiredTime() int64 {
	if o == nil || o.ExpiredTime == nil {
		var ret int64
		return ret
	}
	return *o.ExpiredTime
}

// GetExpiredTimeOk returns a tuple with the ExpiredTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadCredentials) GetExpiredTimeOk() (*int64, bool) {
	if o == nil || o.ExpiredTime == nil {
		return nil, false
	}
	return o.ExpiredTime, true
}

// HasExpiredTime returns a boolean if a field has been set.
func (o *UploadCredentials) HasExpiredTime() bool {
	if o != nil && o.ExpiredTime != nil {
		return true
	}

	return false
}

// SetExpiredTime gets a reference to the given int64 and assigns it to the ExpiredTime field.
func (o *UploadCredentials) SetExpiredTime(v int64) {
	o.ExpiredTime = &v
}

// GetAppId returns the AppId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadCredentials) GetAppId() string {
	if o == nil || o.AppId.Get() == nil {
		var ret string
		return ret
	}
	return *o.AppId.Get()
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadCredentials) GetAppIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppId.Get(), o.AppId.IsSet()
}

// HasAppId returns a boolean if a field has been set.
func (o *UploadCredentials) HasAppId() bool {
	if o != nil && o.AppId.IsSet() {
		return true
	}

	return false
}

// SetAppId gets a reference to the given NullableString and assigns it to the AppId field.
func (o *UploadCredentials) SetAppId(v string) {
	o.AppId.Set(&v)
}
// SetAppIdNil sets the value for AppId to be an explicit nil
func (o *UploadCredentials) SetAppIdNil() {
	o.AppId.Set(nil)
}

// UnsetAppId ensures that no value is present for AppId, not even an explicit nil
func (o *UploadCredentials) UnsetAppId() {
	o.AppId.Unset()
}

func (o UploadCredentials) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StorageClass.IsSet() {
		toSerialize["storageClass"] = o.StorageClass.Get()
	}
	if o.EndPoint.IsSet() {
		toSerialize["endPoint"] = o.EndPoint.Get()
	}
	if o.Protocal.IsSet() {
		toSerialize["protocal"] = o.Protocal.Get()
	}
	if o.BucketName.IsSet() {
		toSerialize["bucketName"] = o.BucketName.Get()
	}
	if o.RegionId.IsSet() {
		toSerialize["regionId"] = o.RegionId.Get()
	}
	if o.SecurityToken.IsSet() {
		toSerialize["securityToken"] = o.SecurityToken.Get()
	}
	if o.AccessKeyId.IsSet() {
		toSerialize["accessKeyId"] = o.AccessKeyId.Get()
	}
	if o.AccessKeySecret.IsSet() {
		toSerialize["accessKeySecret"] = o.AccessKeySecret.Get()
	}
	if o.Expiration.IsSet() {
		toSerialize["expiration"] = o.Expiration.Get()
	}
	if o.ExpiredTime != nil {
		toSerialize["expiredTime"] = o.ExpiredTime
	}
	if o.AppId.IsSet() {
		toSerialize["appId"] = o.AppId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUploadCredentials struct {
	value *UploadCredentials
	isSet bool
}

func (v NullableUploadCredentials) Get() *UploadCredentials {
	return v.value
}

func (v *NullableUploadCredentials) Set(val *UploadCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadCredentials(val *UploadCredentials) *NullableUploadCredentials {
	return &NullableUploadCredentials{value: val, isSet: true}
}

func (v NullableUploadCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


