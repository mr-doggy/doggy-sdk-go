/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
)

// SpecialItemDto struct for SpecialItemDto
type SpecialItemDto struct {
	Items []ItemDto `json:"items,omitempty"`
	// NoteFolder, AlbumFolder, MediaFolder, MusicFolder, DocumentFolder, TodoFolder
	Names *map[string]interface{} `json:"names,omitempty"`
}

// NewSpecialItemDto instantiates a new SpecialItemDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecialItemDto() *SpecialItemDto {
	this := SpecialItemDto{}
	return &this
}

// NewSpecialItemDtoWithDefaults instantiates a new SpecialItemDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecialItemDtoWithDefaults() *SpecialItemDto {
	this := SpecialItemDto{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SpecialItemDto) GetItems() []ItemDto {
	if o == nil  {
		var ret []ItemDto
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SpecialItemDto) GetItemsOk() (*[]ItemDto, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return &o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *SpecialItemDto) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ItemDto and assigns it to the Items field.
func (o *SpecialItemDto) SetItems(v []ItemDto) {
	o.Items = v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *SpecialItemDto) GetNames() map[string]interface{} {
	if o == nil || o.Names == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialItemDto) GetNamesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Names == nil {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *SpecialItemDto) HasNames() bool {
	if o != nil && o.Names != nil {
		return true
	}

	return false
}

// SetNames gets a reference to the given map[string]interface{} and assigns it to the Names field.
func (o *SpecialItemDto) SetNames(v map[string]interface{}) {
	o.Names = &v
}

func (o SpecialItemDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.Names != nil {
		toSerialize["names"] = o.Names
	}
	return json.Marshal(toSerialize)
}

type NullableSpecialItemDto struct {
	value *SpecialItemDto
	isSet bool
}

func (v NullableSpecialItemDto) Get() *SpecialItemDto {
	return v.value
}

func (v *NullableSpecialItemDto) Set(val *SpecialItemDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecialItemDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecialItemDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecialItemDto(val *SpecialItemDto) *NullableSpecialItemDto {
	return &NullableSpecialItemDto{value: val, isSet: true}
}

func (v NullableSpecialItemDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecialItemDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


