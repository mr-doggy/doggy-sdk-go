/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
)

// TodoDtoPagedResultDto struct for TodoDtoPagedResultDto
type TodoDtoPagedResultDto struct {
	Items []TodoDto `json:"items,omitempty"`
	TotalCount *int64 `json:"totalCount,omitempty"`
}

// NewTodoDtoPagedResultDto instantiates a new TodoDtoPagedResultDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTodoDtoPagedResultDto() *TodoDtoPagedResultDto {
	this := TodoDtoPagedResultDto{}
	return &this
}

// NewTodoDtoPagedResultDtoWithDefaults instantiates a new TodoDtoPagedResultDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTodoDtoPagedResultDtoWithDefaults() *TodoDtoPagedResultDto {
	this := TodoDtoPagedResultDto{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TodoDtoPagedResultDto) GetItems() []TodoDto {
	if o == nil  {
		var ret []TodoDto
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TodoDtoPagedResultDto) GetItemsOk() (*[]TodoDto, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return &o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *TodoDtoPagedResultDto) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []TodoDto and assigns it to the Items field.
func (o *TodoDtoPagedResultDto) SetItems(v []TodoDto) {
	o.Items = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *TodoDtoPagedResultDto) GetTotalCount() int64 {
	if o == nil || o.TotalCount == nil {
		var ret int64
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TodoDtoPagedResultDto) GetTotalCountOk() (*int64, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *TodoDtoPagedResultDto) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int64 and assigns it to the TotalCount field.
func (o *TodoDtoPagedResultDto) SetTotalCount(v int64) {
	o.TotalCount = &v
}

func (o TodoDtoPagedResultDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.TotalCount != nil {
		toSerialize["totalCount"] = o.TotalCount
	}
	return json.Marshal(toSerialize)
}

type NullableTodoDtoPagedResultDto struct {
	value *TodoDtoPagedResultDto
	isSet bool
}

func (v NullableTodoDtoPagedResultDto) Get() *TodoDtoPagedResultDto {
	return v.value
}

func (v *NullableTodoDtoPagedResultDto) Set(val *TodoDtoPagedResultDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTodoDtoPagedResultDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTodoDtoPagedResultDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTodoDtoPagedResultDto(val *TodoDtoPagedResultDto) *NullableTodoDtoPagedResultDto {
	return &NullableTodoDtoPagedResultDto{value: val, isSet: true}
}

func (v NullableTodoDtoPagedResultDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTodoDtoPagedResultDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


