/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"time"
)

// CreateUpdateNotificationDto struct for CreateUpdateNotificationDto
type CreateUpdateNotificationDto struct {
	UserId *string `json:"userId,omitempty"`
	NotificationInfoId *string `json:"notificationInfoId,omitempty"`
	NotificationMethod NullableString `json:"notificationMethod,omitempty"`
	Success NullableBool `json:"success,omitempty"`
	CompletionTime NullableTime `json:"completionTime,omitempty"`
	FailureReason NullableString `json:"failureReason,omitempty"`
	RetryNotificationId NullableString `json:"retryNotificationId,omitempty"`
}

// NewCreateUpdateNotificationDto instantiates a new CreateUpdateNotificationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUpdateNotificationDto() *CreateUpdateNotificationDto {
	this := CreateUpdateNotificationDto{}
	return &this
}

// NewCreateUpdateNotificationDtoWithDefaults instantiates a new CreateUpdateNotificationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUpdateNotificationDtoWithDefaults() *CreateUpdateNotificationDto {
	this := CreateUpdateNotificationDto{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *CreateUpdateNotificationDto) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateNotificationDto) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *CreateUpdateNotificationDto) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *CreateUpdateNotificationDto) SetUserId(v string) {
	o.UserId = &v
}

// GetNotificationInfoId returns the NotificationInfoId field value if set, zero value otherwise.
func (o *CreateUpdateNotificationDto) GetNotificationInfoId() string {
	if o == nil || o.NotificationInfoId == nil {
		var ret string
		return ret
	}
	return *o.NotificationInfoId
}

// GetNotificationInfoIdOk returns a tuple with the NotificationInfoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateNotificationDto) GetNotificationInfoIdOk() (*string, bool) {
	if o == nil || o.NotificationInfoId == nil {
		return nil, false
	}
	return o.NotificationInfoId, true
}

// HasNotificationInfoId returns a boolean if a field has been set.
func (o *CreateUpdateNotificationDto) HasNotificationInfoId() bool {
	if o != nil && o.NotificationInfoId != nil {
		return true
	}

	return false
}

// SetNotificationInfoId gets a reference to the given string and assigns it to the NotificationInfoId field.
func (o *CreateUpdateNotificationDto) SetNotificationInfoId(v string) {
	o.NotificationInfoId = &v
}

// GetNotificationMethod returns the NotificationMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateNotificationDto) GetNotificationMethod() string {
	if o == nil || o.NotificationMethod.Get() == nil {
		var ret string
		return ret
	}
	return *o.NotificationMethod.Get()
}

// GetNotificationMethodOk returns a tuple with the NotificationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateNotificationDto) GetNotificationMethodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NotificationMethod.Get(), o.NotificationMethod.IsSet()
}

// HasNotificationMethod returns a boolean if a field has been set.
func (o *CreateUpdateNotificationDto) HasNotificationMethod() bool {
	if o != nil && o.NotificationMethod.IsSet() {
		return true
	}

	return false
}

// SetNotificationMethod gets a reference to the given NullableString and assigns it to the NotificationMethod field.
func (o *CreateUpdateNotificationDto) SetNotificationMethod(v string) {
	o.NotificationMethod.Set(&v)
}
// SetNotificationMethodNil sets the value for NotificationMethod to be an explicit nil
func (o *CreateUpdateNotificationDto) SetNotificationMethodNil() {
	o.NotificationMethod.Set(nil)
}

// UnsetNotificationMethod ensures that no value is present for NotificationMethod, not even an explicit nil
func (o *CreateUpdateNotificationDto) UnsetNotificationMethod() {
	o.NotificationMethod.Unset()
}

// GetSuccess returns the Success field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateNotificationDto) GetSuccess() bool {
	if o == nil || o.Success.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Success.Get()
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateNotificationDto) GetSuccessOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Success.Get(), o.Success.IsSet()
}

// HasSuccess returns a boolean if a field has been set.
func (o *CreateUpdateNotificationDto) HasSuccess() bool {
	if o != nil && o.Success.IsSet() {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given NullableBool and assigns it to the Success field.
func (o *CreateUpdateNotificationDto) SetSuccess(v bool) {
	o.Success.Set(&v)
}
// SetSuccessNil sets the value for Success to be an explicit nil
func (o *CreateUpdateNotificationDto) SetSuccessNil() {
	o.Success.Set(nil)
}

// UnsetSuccess ensures that no value is present for Success, not even an explicit nil
func (o *CreateUpdateNotificationDto) UnsetSuccess() {
	o.Success.Unset()
}

// GetCompletionTime returns the CompletionTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateNotificationDto) GetCompletionTime() time.Time {
	if o == nil || o.CompletionTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.CompletionTime.Get()
}

// GetCompletionTimeOk returns a tuple with the CompletionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateNotificationDto) GetCompletionTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CompletionTime.Get(), o.CompletionTime.IsSet()
}

// HasCompletionTime returns a boolean if a field has been set.
func (o *CreateUpdateNotificationDto) HasCompletionTime() bool {
	if o != nil && o.CompletionTime.IsSet() {
		return true
	}

	return false
}

// SetCompletionTime gets a reference to the given NullableTime and assigns it to the CompletionTime field.
func (o *CreateUpdateNotificationDto) SetCompletionTime(v time.Time) {
	o.CompletionTime.Set(&v)
}
// SetCompletionTimeNil sets the value for CompletionTime to be an explicit nil
func (o *CreateUpdateNotificationDto) SetCompletionTimeNil() {
	o.CompletionTime.Set(nil)
}

// UnsetCompletionTime ensures that no value is present for CompletionTime, not even an explicit nil
func (o *CreateUpdateNotificationDto) UnsetCompletionTime() {
	o.CompletionTime.Unset()
}

// GetFailureReason returns the FailureReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateNotificationDto) GetFailureReason() string {
	if o == nil || o.FailureReason.Get() == nil {
		var ret string
		return ret
	}
	return *o.FailureReason.Get()
}

// GetFailureReasonOk returns a tuple with the FailureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateNotificationDto) GetFailureReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FailureReason.Get(), o.FailureReason.IsSet()
}

// HasFailureReason returns a boolean if a field has been set.
func (o *CreateUpdateNotificationDto) HasFailureReason() bool {
	if o != nil && o.FailureReason.IsSet() {
		return true
	}

	return false
}

// SetFailureReason gets a reference to the given NullableString and assigns it to the FailureReason field.
func (o *CreateUpdateNotificationDto) SetFailureReason(v string) {
	o.FailureReason.Set(&v)
}
// SetFailureReasonNil sets the value for FailureReason to be an explicit nil
func (o *CreateUpdateNotificationDto) SetFailureReasonNil() {
	o.FailureReason.Set(nil)
}

// UnsetFailureReason ensures that no value is present for FailureReason, not even an explicit nil
func (o *CreateUpdateNotificationDto) UnsetFailureReason() {
	o.FailureReason.Unset()
}

// GetRetryNotificationId returns the RetryNotificationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateNotificationDto) GetRetryNotificationId() string {
	if o == nil || o.RetryNotificationId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RetryNotificationId.Get()
}

// GetRetryNotificationIdOk returns a tuple with the RetryNotificationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateNotificationDto) GetRetryNotificationIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RetryNotificationId.Get(), o.RetryNotificationId.IsSet()
}

// HasRetryNotificationId returns a boolean if a field has been set.
func (o *CreateUpdateNotificationDto) HasRetryNotificationId() bool {
	if o != nil && o.RetryNotificationId.IsSet() {
		return true
	}

	return false
}

// SetRetryNotificationId gets a reference to the given NullableString and assigns it to the RetryNotificationId field.
func (o *CreateUpdateNotificationDto) SetRetryNotificationId(v string) {
	o.RetryNotificationId.Set(&v)
}
// SetRetryNotificationIdNil sets the value for RetryNotificationId to be an explicit nil
func (o *CreateUpdateNotificationDto) SetRetryNotificationIdNil() {
	o.RetryNotificationId.Set(nil)
}

// UnsetRetryNotificationId ensures that no value is present for RetryNotificationId, not even an explicit nil
func (o *CreateUpdateNotificationDto) UnsetRetryNotificationId() {
	o.RetryNotificationId.Unset()
}

func (o CreateUpdateNotificationDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if o.NotificationInfoId != nil {
		toSerialize["notificationInfoId"] = o.NotificationInfoId
	}
	if o.NotificationMethod.IsSet() {
		toSerialize["notificationMethod"] = o.NotificationMethod.Get()
	}
	if o.Success.IsSet() {
		toSerialize["success"] = o.Success.Get()
	}
	if o.CompletionTime.IsSet() {
		toSerialize["completionTime"] = o.CompletionTime.Get()
	}
	if o.FailureReason.IsSet() {
		toSerialize["failureReason"] = o.FailureReason.Get()
	}
	if o.RetryNotificationId.IsSet() {
		toSerialize["retryNotificationId"] = o.RetryNotificationId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateUpdateNotificationDto struct {
	value *CreateUpdateNotificationDto
	isSet bool
}

func (v NullableCreateUpdateNotificationDto) Get() *CreateUpdateNotificationDto {
	return v.value
}

func (v *NullableCreateUpdateNotificationDto) Set(val *CreateUpdateNotificationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUpdateNotificationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUpdateNotificationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUpdateNotificationDto(val *CreateUpdateNotificationDto) *NullableCreateUpdateNotificationDto {
	return &NullableCreateUpdateNotificationDto{value: val, isSet: true}
}

func (v NullableCreateUpdateNotificationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUpdateNotificationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


