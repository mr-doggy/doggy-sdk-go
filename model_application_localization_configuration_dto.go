/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
)

// ApplicationLocalizationConfigurationDto struct for ApplicationLocalizationConfigurationDto
type ApplicationLocalizationConfigurationDto struct {
	Values map[string]map[string]string `json:"values,omitempty"`
	Languages []LanguageInfo `json:"languages,omitempty"`
	CurrentCulture *CurrentCultureDto `json:"currentCulture,omitempty"`
	DefaultResourceName NullableString `json:"defaultResourceName,omitempty"`
	LanguagesMap map[string][]NameValue `json:"languagesMap,omitempty"`
	LanguageFilesMap map[string][]NameValue `json:"languageFilesMap,omitempty"`
}

// NewApplicationLocalizationConfigurationDto instantiates a new ApplicationLocalizationConfigurationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationLocalizationConfigurationDto() *ApplicationLocalizationConfigurationDto {
	this := ApplicationLocalizationConfigurationDto{}
	return &this
}

// NewApplicationLocalizationConfigurationDtoWithDefaults instantiates a new ApplicationLocalizationConfigurationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationLocalizationConfigurationDtoWithDefaults() *ApplicationLocalizationConfigurationDto {
	this := ApplicationLocalizationConfigurationDto{}
	return &this
}

// GetValues returns the Values field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationLocalizationConfigurationDto) GetValues() map[string]map[string]string {
	if o == nil  {
		var ret map[string]map[string]string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationLocalizationConfigurationDto) GetValuesOk() (*map[string]map[string]string, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return &o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ApplicationLocalizationConfigurationDto) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given map[string]map[string]string and assigns it to the Values field.
func (o *ApplicationLocalizationConfigurationDto) SetValues(v map[string]map[string]string) {
	o.Values = v
}

// GetLanguages returns the Languages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationLocalizationConfigurationDto) GetLanguages() []LanguageInfo {
	if o == nil  {
		var ret []LanguageInfo
		return ret
	}
	return o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationLocalizationConfigurationDto) GetLanguagesOk() (*[]LanguageInfo, bool) {
	if o == nil || o.Languages == nil {
		return nil, false
	}
	return &o.Languages, true
}

// HasLanguages returns a boolean if a field has been set.
func (o *ApplicationLocalizationConfigurationDto) HasLanguages() bool {
	if o != nil && o.Languages != nil {
		return true
	}

	return false
}

// SetLanguages gets a reference to the given []LanguageInfo and assigns it to the Languages field.
func (o *ApplicationLocalizationConfigurationDto) SetLanguages(v []LanguageInfo) {
	o.Languages = v
}

// GetCurrentCulture returns the CurrentCulture field value if set, zero value otherwise.
func (o *ApplicationLocalizationConfigurationDto) GetCurrentCulture() CurrentCultureDto {
	if o == nil || o.CurrentCulture == nil {
		var ret CurrentCultureDto
		return ret
	}
	return *o.CurrentCulture
}

// GetCurrentCultureOk returns a tuple with the CurrentCulture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationLocalizationConfigurationDto) GetCurrentCultureOk() (*CurrentCultureDto, bool) {
	if o == nil || o.CurrentCulture == nil {
		return nil, false
	}
	return o.CurrentCulture, true
}

// HasCurrentCulture returns a boolean if a field has been set.
func (o *ApplicationLocalizationConfigurationDto) HasCurrentCulture() bool {
	if o != nil && o.CurrentCulture != nil {
		return true
	}

	return false
}

// SetCurrentCulture gets a reference to the given CurrentCultureDto and assigns it to the CurrentCulture field.
func (o *ApplicationLocalizationConfigurationDto) SetCurrentCulture(v CurrentCultureDto) {
	o.CurrentCulture = &v
}

// GetDefaultResourceName returns the DefaultResourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationLocalizationConfigurationDto) GetDefaultResourceName() string {
	if o == nil || o.DefaultResourceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DefaultResourceName.Get()
}

// GetDefaultResourceNameOk returns a tuple with the DefaultResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationLocalizationConfigurationDto) GetDefaultResourceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DefaultResourceName.Get(), o.DefaultResourceName.IsSet()
}

// HasDefaultResourceName returns a boolean if a field has been set.
func (o *ApplicationLocalizationConfigurationDto) HasDefaultResourceName() bool {
	if o != nil && o.DefaultResourceName.IsSet() {
		return true
	}

	return false
}

// SetDefaultResourceName gets a reference to the given NullableString and assigns it to the DefaultResourceName field.
func (o *ApplicationLocalizationConfigurationDto) SetDefaultResourceName(v string) {
	o.DefaultResourceName.Set(&v)
}
// SetDefaultResourceNameNil sets the value for DefaultResourceName to be an explicit nil
func (o *ApplicationLocalizationConfigurationDto) SetDefaultResourceNameNil() {
	o.DefaultResourceName.Set(nil)
}

// UnsetDefaultResourceName ensures that no value is present for DefaultResourceName, not even an explicit nil
func (o *ApplicationLocalizationConfigurationDto) UnsetDefaultResourceName() {
	o.DefaultResourceName.Unset()
}

// GetLanguagesMap returns the LanguagesMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationLocalizationConfigurationDto) GetLanguagesMap() map[string][]NameValue {
	if o == nil  {
		var ret map[string][]NameValue
		return ret
	}
	return o.LanguagesMap
}

// GetLanguagesMapOk returns a tuple with the LanguagesMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationLocalizationConfigurationDto) GetLanguagesMapOk() (*map[string][]NameValue, bool) {
	if o == nil || o.LanguagesMap == nil {
		return nil, false
	}
	return &o.LanguagesMap, true
}

// HasLanguagesMap returns a boolean if a field has been set.
func (o *ApplicationLocalizationConfigurationDto) HasLanguagesMap() bool {
	if o != nil && o.LanguagesMap != nil {
		return true
	}

	return false
}

// SetLanguagesMap gets a reference to the given map[string][]NameValue and assigns it to the LanguagesMap field.
func (o *ApplicationLocalizationConfigurationDto) SetLanguagesMap(v map[string][]NameValue) {
	o.LanguagesMap = v
}

// GetLanguageFilesMap returns the LanguageFilesMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationLocalizationConfigurationDto) GetLanguageFilesMap() map[string][]NameValue {
	if o == nil  {
		var ret map[string][]NameValue
		return ret
	}
	return o.LanguageFilesMap
}

// GetLanguageFilesMapOk returns a tuple with the LanguageFilesMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationLocalizationConfigurationDto) GetLanguageFilesMapOk() (*map[string][]NameValue, bool) {
	if o == nil || o.LanguageFilesMap == nil {
		return nil, false
	}
	return &o.LanguageFilesMap, true
}

// HasLanguageFilesMap returns a boolean if a field has been set.
func (o *ApplicationLocalizationConfigurationDto) HasLanguageFilesMap() bool {
	if o != nil && o.LanguageFilesMap != nil {
		return true
	}

	return false
}

// SetLanguageFilesMap gets a reference to the given map[string][]NameValue and assigns it to the LanguageFilesMap field.
func (o *ApplicationLocalizationConfigurationDto) SetLanguageFilesMap(v map[string][]NameValue) {
	o.LanguageFilesMap = v
}

func (o ApplicationLocalizationConfigurationDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	if o.Languages != nil {
		toSerialize["languages"] = o.Languages
	}
	if o.CurrentCulture != nil {
		toSerialize["currentCulture"] = o.CurrentCulture
	}
	if o.DefaultResourceName.IsSet() {
		toSerialize["defaultResourceName"] = o.DefaultResourceName.Get()
	}
	if o.LanguagesMap != nil {
		toSerialize["languagesMap"] = o.LanguagesMap
	}
	if o.LanguageFilesMap != nil {
		toSerialize["languageFilesMap"] = o.LanguageFilesMap
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationLocalizationConfigurationDto struct {
	value *ApplicationLocalizationConfigurationDto
	isSet bool
}

func (v NullableApplicationLocalizationConfigurationDto) Get() *ApplicationLocalizationConfigurationDto {
	return v.value
}

func (v *NullableApplicationLocalizationConfigurationDto) Set(val *ApplicationLocalizationConfigurationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationLocalizationConfigurationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationLocalizationConfigurationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationLocalizationConfigurationDto(val *ApplicationLocalizationConfigurationDto) *NullableApplicationLocalizationConfigurationDto {
	return &NullableApplicationLocalizationConfigurationDto{value: val, isSet: true}
}

func (v NullableApplicationLocalizationConfigurationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationLocalizationConfigurationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


