/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"fmt"
)

// Framework the model 'Framework'
type Framework string

// List of Framework
const (
	FRAMEWORK_FLUTTER Framework = "Flutter"
	FRAMEWORK_REACT_NATIVE Framework = "ReactNative"
	FRAMEWORK_NATIVE_IOS Framework = "NativeIOS"
	FRAMEWORK_NATIVE_ANDROID Framework = "NativeAndroid"
	FRAMEWORK_IONIC Framework = "Ionic"
	FRAMEWORK_CORDOVA Framework = "Cordova"
	FRAMEWORK_REACT Framework = "React"
	FRAMEWORK_ASP_NET_CORE Framework = "AspNetCore"
)

// All allowed values of Framework enum
var AllowedFrameworkEnumValues = []Framework{
	"Flutter",
	"ReactNative",
	"NativeIOS",
	"NativeAndroid",
	"Ionic",
	"Cordova",
	"React",
	"AspNetCore",
}

func (v *Framework) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Framework(value)
	for _, existing := range AllowedFrameworkEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Framework", value)
}

// NewFrameworkFromValue returns a pointer to a valid Framework
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFrameworkFromValue(v string) (*Framework, error) {
	ev := Framework(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Framework: valid values are %v", v, AllowedFrameworkEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Framework) IsValid() bool {
	for _, existing := range AllowedFrameworkEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Framework value
func (v Framework) Ptr() *Framework {
	return &v
}

type NullableFramework struct {
	value *Framework
	isSet bool
}

func (v NullableFramework) Get() *Framework {
	return v.value
}

func (v *NullableFramework) Set(val *Framework) {
	v.value = val
	v.isSet = true
}

func (v NullableFramework) IsSet() bool {
	return v.isSet
}

func (v *NullableFramework) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFramework(val *Framework) *NullableFramework {
	return &NullableFramework{value: val, isSet: true}
}

func (v NullableFramework) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFramework) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

