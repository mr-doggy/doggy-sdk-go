/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"fmt"
)

// DisplayStyle the model 'DisplayStyle'
type DisplayStyle string

// List of DisplayStyle
const (
	DISPLAYSTYLE_NONE DisplayStyle = "None"
	DISPLAYSTYLE_LIST_ITEM DisplayStyle = "ListItem"
	DISPLAYSTYLE_LARGE_THUMBNAIL DisplayStyle = "LargeThumbnail"
)

// All allowed values of DisplayStyle enum
var AllowedDisplayStyleEnumValues = []DisplayStyle{
	"None",
	"ListItem",
	"LargeThumbnail",
}

func (v *DisplayStyle) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DisplayStyle(value)
	for _, existing := range AllowedDisplayStyleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DisplayStyle", value)
}

// NewDisplayStyleFromValue returns a pointer to a valid DisplayStyle
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDisplayStyleFromValue(v string) (*DisplayStyle, error) {
	ev := DisplayStyle(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DisplayStyle: valid values are %v", v, AllowedDisplayStyleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DisplayStyle) IsValid() bool {
	for _, existing := range AllowedDisplayStyleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DisplayStyle value
func (v DisplayStyle) Ptr() *DisplayStyle {
	return &v
}

type NullableDisplayStyle struct {
	value *DisplayStyle
	isSet bool
}

func (v NullableDisplayStyle) Get() *DisplayStyle {
	return v.value
}

func (v *NullableDisplayStyle) Set(val *DisplayStyle) {
	v.value = val
	v.isSet = true
}

func (v NullableDisplayStyle) IsSet() bool {
	return v.isSet
}

func (v *NullableDisplayStyle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisplayStyle(val *DisplayStyle) *NullableDisplayStyle {
	return &NullableDisplayStyle{value: val, isSet: true}
}

func (v NullableDisplayStyle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisplayStyle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

