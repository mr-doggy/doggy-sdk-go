/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
)

// TodoTag struct for TodoTag
type TodoTag struct {
	TodoId *string `json:"todoId,omitempty"`
	Todo *Todo `json:"todo,omitempty"`
	TagId *string `json:"tagId,omitempty"`
	Tag *Tag `json:"tag,omitempty"`
}

// NewTodoTag instantiates a new TodoTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTodoTag() *TodoTag {
	this := TodoTag{}
	return &this
}

// NewTodoTagWithDefaults instantiates a new TodoTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTodoTagWithDefaults() *TodoTag {
	this := TodoTag{}
	return &this
}

// GetTodoId returns the TodoId field value if set, zero value otherwise.
func (o *TodoTag) GetTodoId() string {
	if o == nil || o.TodoId == nil {
		var ret string
		return ret
	}
	return *o.TodoId
}

// GetTodoIdOk returns a tuple with the TodoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TodoTag) GetTodoIdOk() (*string, bool) {
	if o == nil || o.TodoId == nil {
		return nil, false
	}
	return o.TodoId, true
}

// HasTodoId returns a boolean if a field has been set.
func (o *TodoTag) HasTodoId() bool {
	if o != nil && o.TodoId != nil {
		return true
	}

	return false
}

// SetTodoId gets a reference to the given string and assigns it to the TodoId field.
func (o *TodoTag) SetTodoId(v string) {
	o.TodoId = &v
}

// GetTodo returns the Todo field value if set, zero value otherwise.
func (o *TodoTag) GetTodo() Todo {
	if o == nil || o.Todo == nil {
		var ret Todo
		return ret
	}
	return *o.Todo
}

// GetTodoOk returns a tuple with the Todo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TodoTag) GetTodoOk() (*Todo, bool) {
	if o == nil || o.Todo == nil {
		return nil, false
	}
	return o.Todo, true
}

// HasTodo returns a boolean if a field has been set.
func (o *TodoTag) HasTodo() bool {
	if o != nil && o.Todo != nil {
		return true
	}

	return false
}

// SetTodo gets a reference to the given Todo and assigns it to the Todo field.
func (o *TodoTag) SetTodo(v Todo) {
	o.Todo = &v
}

// GetTagId returns the TagId field value if set, zero value otherwise.
func (o *TodoTag) GetTagId() string {
	if o == nil || o.TagId == nil {
		var ret string
		return ret
	}
	return *o.TagId
}

// GetTagIdOk returns a tuple with the TagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TodoTag) GetTagIdOk() (*string, bool) {
	if o == nil || o.TagId == nil {
		return nil, false
	}
	return o.TagId, true
}

// HasTagId returns a boolean if a field has been set.
func (o *TodoTag) HasTagId() bool {
	if o != nil && o.TagId != nil {
		return true
	}

	return false
}

// SetTagId gets a reference to the given string and assigns it to the TagId field.
func (o *TodoTag) SetTagId(v string) {
	o.TagId = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *TodoTag) GetTag() Tag {
	if o == nil || o.Tag == nil {
		var ret Tag
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TodoTag) GetTagOk() (*Tag, bool) {
	if o == nil || o.Tag == nil {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *TodoTag) HasTag() bool {
	if o != nil && o.Tag != nil {
		return true
	}

	return false
}

// SetTag gets a reference to the given Tag and assigns it to the Tag field.
func (o *TodoTag) SetTag(v Tag) {
	o.Tag = &v
}

func (o TodoTag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TodoId != nil {
		toSerialize["todoId"] = o.TodoId
	}
	if o.Todo != nil {
		toSerialize["todo"] = o.Todo
	}
	if o.TagId != nil {
		toSerialize["tagId"] = o.TagId
	}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	return json.Marshal(toSerialize)
}

type NullableTodoTag struct {
	value *TodoTag
	isSet bool
}

func (v NullableTodoTag) Get() *TodoTag {
	return v.value
}

func (v *NullableTodoTag) Set(val *TodoTag) {
	v.value = val
	v.isSet = true
}

func (v NullableTodoTag) IsSet() bool {
	return v.isSet
}

func (v *NullableTodoTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTodoTag(val *TodoTag) *NullableTodoTag {
	return &NullableTodoTag{value: val, isSet: true}
}

func (v NullableTodoTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTodoTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


