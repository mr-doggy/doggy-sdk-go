/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"fmt"
)

// TodoNotifyTimingType the model 'TodoNotifyTimingType'
type TodoNotifyTimingType string

// List of TodoNotifyTimingType
const (
	TODONOTIFYTIMINGTYPE_NONE TodoNotifyTimingType = "None"
	TODONOTIFYTIMINGTYPE_BEFORE TodoNotifyTimingType = "Before"
	TODONOTIFYTIMINGTYPE_AFTER TodoNotifyTimingType = "After"
)

// All allowed values of TodoNotifyTimingType enum
var AllowedTodoNotifyTimingTypeEnumValues = []TodoNotifyTimingType{
	"None",
	"Before",
	"After",
}

func (v *TodoNotifyTimingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TodoNotifyTimingType(value)
	for _, existing := range AllowedTodoNotifyTimingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TodoNotifyTimingType", value)
}

// NewTodoNotifyTimingTypeFromValue returns a pointer to a valid TodoNotifyTimingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTodoNotifyTimingTypeFromValue(v string) (*TodoNotifyTimingType, error) {
	ev := TodoNotifyTimingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TodoNotifyTimingType: valid values are %v", v, AllowedTodoNotifyTimingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TodoNotifyTimingType) IsValid() bool {
	for _, existing := range AllowedTodoNotifyTimingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TodoNotifyTimingType value
func (v TodoNotifyTimingType) Ptr() *TodoNotifyTimingType {
	return &v
}

type NullableTodoNotifyTimingType struct {
	value *TodoNotifyTimingType
	isSet bool
}

func (v NullableTodoNotifyTimingType) Get() *TodoNotifyTimingType {
	return v.value
}

func (v *NullableTodoNotifyTimingType) Set(val *TodoNotifyTimingType) {
	v.value = val
	v.isSet = true
}

func (v NullableTodoNotifyTimingType) IsSet() bool {
	return v.isSet
}

func (v *NullableTodoNotifyTimingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTodoNotifyTimingType(val *TodoNotifyTimingType) *NullableTodoNotifyTimingType {
	return &NullableTodoNotifyTimingType{value: val, isSet: true}
}

func (v NullableTodoNotifyTimingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTodoNotifyTimingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

