/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
)

// AppThemePlatformSettings struct for AppThemePlatformSettings
type AppThemePlatformSettings struct {
	Android *AppTheme `json:"android,omitempty"`
	IOS *AppTheme `json:"iOS,omitempty"`
	Web *AppTheme `json:"web,omitempty"`
	Windows *AppTheme `json:"windows,omitempty"`
	Macos *AppTheme `json:"macos,omitempty"`
	Linux *AppTheme `json:"linux,omitempty"`
}

// NewAppThemePlatformSettings instantiates a new AppThemePlatformSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppThemePlatformSettings() *AppThemePlatformSettings {
	this := AppThemePlatformSettings{}
	return &this
}

// NewAppThemePlatformSettingsWithDefaults instantiates a new AppThemePlatformSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppThemePlatformSettingsWithDefaults() *AppThemePlatformSettings {
	this := AppThemePlatformSettings{}
	return &this
}

// GetAndroid returns the Android field value if set, zero value otherwise.
func (o *AppThemePlatformSettings) GetAndroid() AppTheme {
	if o == nil || o.Android == nil {
		var ret AppTheme
		return ret
	}
	return *o.Android
}

// GetAndroidOk returns a tuple with the Android field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppThemePlatformSettings) GetAndroidOk() (*AppTheme, bool) {
	if o == nil || o.Android == nil {
		return nil, false
	}
	return o.Android, true
}

// HasAndroid returns a boolean if a field has been set.
func (o *AppThemePlatformSettings) HasAndroid() bool {
	if o != nil && o.Android != nil {
		return true
	}

	return false
}

// SetAndroid gets a reference to the given AppTheme and assigns it to the Android field.
func (o *AppThemePlatformSettings) SetAndroid(v AppTheme) {
	o.Android = &v
}

// GetIOS returns the IOS field value if set, zero value otherwise.
func (o *AppThemePlatformSettings) GetIOS() AppTheme {
	if o == nil || o.IOS == nil {
		var ret AppTheme
		return ret
	}
	return *o.IOS
}

// GetIOSOk returns a tuple with the IOS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppThemePlatformSettings) GetIOSOk() (*AppTheme, bool) {
	if o == nil || o.IOS == nil {
		return nil, false
	}
	return o.IOS, true
}

// HasIOS returns a boolean if a field has been set.
func (o *AppThemePlatformSettings) HasIOS() bool {
	if o != nil && o.IOS != nil {
		return true
	}

	return false
}

// SetIOS gets a reference to the given AppTheme and assigns it to the IOS field.
func (o *AppThemePlatformSettings) SetIOS(v AppTheme) {
	o.IOS = &v
}

// GetWeb returns the Web field value if set, zero value otherwise.
func (o *AppThemePlatformSettings) GetWeb() AppTheme {
	if o == nil || o.Web == nil {
		var ret AppTheme
		return ret
	}
	return *o.Web
}

// GetWebOk returns a tuple with the Web field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppThemePlatformSettings) GetWebOk() (*AppTheme, bool) {
	if o == nil || o.Web == nil {
		return nil, false
	}
	return o.Web, true
}

// HasWeb returns a boolean if a field has been set.
func (o *AppThemePlatformSettings) HasWeb() bool {
	if o != nil && o.Web != nil {
		return true
	}

	return false
}

// SetWeb gets a reference to the given AppTheme and assigns it to the Web field.
func (o *AppThemePlatformSettings) SetWeb(v AppTheme) {
	o.Web = &v
}

// GetWindows returns the Windows field value if set, zero value otherwise.
func (o *AppThemePlatformSettings) GetWindows() AppTheme {
	if o == nil || o.Windows == nil {
		var ret AppTheme
		return ret
	}
	return *o.Windows
}

// GetWindowsOk returns a tuple with the Windows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppThemePlatformSettings) GetWindowsOk() (*AppTheme, bool) {
	if o == nil || o.Windows == nil {
		return nil, false
	}
	return o.Windows, true
}

// HasWindows returns a boolean if a field has been set.
func (o *AppThemePlatformSettings) HasWindows() bool {
	if o != nil && o.Windows != nil {
		return true
	}

	return false
}

// SetWindows gets a reference to the given AppTheme and assigns it to the Windows field.
func (o *AppThemePlatformSettings) SetWindows(v AppTheme) {
	o.Windows = &v
}

// GetMacos returns the Macos field value if set, zero value otherwise.
func (o *AppThemePlatformSettings) GetMacos() AppTheme {
	if o == nil || o.Macos == nil {
		var ret AppTheme
		return ret
	}
	return *o.Macos
}

// GetMacosOk returns a tuple with the Macos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppThemePlatformSettings) GetMacosOk() (*AppTheme, bool) {
	if o == nil || o.Macos == nil {
		return nil, false
	}
	return o.Macos, true
}

// HasMacos returns a boolean if a field has been set.
func (o *AppThemePlatformSettings) HasMacos() bool {
	if o != nil && o.Macos != nil {
		return true
	}

	return false
}

// SetMacos gets a reference to the given AppTheme and assigns it to the Macos field.
func (o *AppThemePlatformSettings) SetMacos(v AppTheme) {
	o.Macos = &v
}

// GetLinux returns the Linux field value if set, zero value otherwise.
func (o *AppThemePlatformSettings) GetLinux() AppTheme {
	if o == nil || o.Linux == nil {
		var ret AppTheme
		return ret
	}
	return *o.Linux
}

// GetLinuxOk returns a tuple with the Linux field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppThemePlatformSettings) GetLinuxOk() (*AppTheme, bool) {
	if o == nil || o.Linux == nil {
		return nil, false
	}
	return o.Linux, true
}

// HasLinux returns a boolean if a field has been set.
func (o *AppThemePlatformSettings) HasLinux() bool {
	if o != nil && o.Linux != nil {
		return true
	}

	return false
}

// SetLinux gets a reference to the given AppTheme and assigns it to the Linux field.
func (o *AppThemePlatformSettings) SetLinux(v AppTheme) {
	o.Linux = &v
}

func (o AppThemePlatformSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Android != nil {
		toSerialize["android"] = o.Android
	}
	if o.IOS != nil {
		toSerialize["iOS"] = o.IOS
	}
	if o.Web != nil {
		toSerialize["web"] = o.Web
	}
	if o.Windows != nil {
		toSerialize["windows"] = o.Windows
	}
	if o.Macos != nil {
		toSerialize["macos"] = o.Macos
	}
	if o.Linux != nil {
		toSerialize["linux"] = o.Linux
	}
	return json.Marshal(toSerialize)
}

type NullableAppThemePlatformSettings struct {
	value *AppThemePlatformSettings
	isSet bool
}

func (v NullableAppThemePlatformSettings) Get() *AppThemePlatformSettings {
	return v.value
}

func (v *NullableAppThemePlatformSettings) Set(val *AppThemePlatformSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAppThemePlatformSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAppThemePlatformSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppThemePlatformSettings(val *AppThemePlatformSettings) *NullableAppThemePlatformSettings {
	return &NullableAppThemePlatformSettings{value: val, isSet: true}
}

func (v NullableAppThemePlatformSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppThemePlatformSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


