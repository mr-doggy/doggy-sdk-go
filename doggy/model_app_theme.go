/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"fmt"
)

// AppTheme the model 'AppTheme'
type AppTheme string

// List of AppTheme
const (
	SYSTEM AppTheme = "System"
	LIGHT AppTheme = "Light"
	DARK AppTheme = "Dark"
)

// All allowed values of AppTheme enum
var AllowedAppThemeEnumValues = []AppTheme{
	"System",
	"Light",
	"Dark",
}

func (v *AppTheme) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppTheme(value)
	for _, existing := range AllowedAppThemeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppTheme", value)
}

// NewAppThemeFromValue returns a pointer to a valid AppTheme
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppThemeFromValue(v string) (*AppTheme, error) {
	ev := AppTheme(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppTheme: valid values are %v", v, AllowedAppThemeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppTheme) IsValid() bool {
	for _, existing := range AllowedAppThemeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppTheme value
func (v AppTheme) Ptr() *AppTheme {
	return &v
}

type NullableAppTheme struct {
	value *AppTheme
	isSet bool
}

func (v NullableAppTheme) Get() *AppTheme {
	return v.value
}

func (v *NullableAppTheme) Set(val *AppTheme) {
	v.value = val
	v.isSet = true
}

func (v NullableAppTheme) IsSet() bool {
	return v.isSet
}

func (v *NullableAppTheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppTheme(val *AppTheme) *NullableAppTheme {
	return &NullableAppTheme{value: val, isSet: true}
}

func (v NullableAppTheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppTheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

