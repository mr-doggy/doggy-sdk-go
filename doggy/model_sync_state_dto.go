/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"time"
)

// SyncStateDto struct for SyncStateDto
type SyncStateDto struct {
	LastSyncAt *time.Time `json:"lastSyncAt,omitempty"`
	TagVersion *int64 `json:"tagVersion,omitempty"`
	ItemVersion *int64 `json:"itemVersion,omitempty"`
	TodoVersion *int64 `json:"todoVersion,omitempty"`
}

// NewSyncStateDto instantiates a new SyncStateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyncStateDto() *SyncStateDto {
	this := SyncStateDto{}
	return &this
}

// NewSyncStateDtoWithDefaults instantiates a new SyncStateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyncStateDtoWithDefaults() *SyncStateDto {
	this := SyncStateDto{}
	return &this
}

// GetLastSyncAt returns the LastSyncAt field value if set, zero value otherwise.
func (o *SyncStateDto) GetLastSyncAt() time.Time {
	if o == nil || o.LastSyncAt == nil {
		var ret time.Time
		return ret
	}
	return *o.LastSyncAt
}

// GetLastSyncAtOk returns a tuple with the LastSyncAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncStateDto) GetLastSyncAtOk() (*time.Time, bool) {
	if o == nil || o.LastSyncAt == nil {
		return nil, false
	}
	return o.LastSyncAt, true
}

// HasLastSyncAt returns a boolean if a field has been set.
func (o *SyncStateDto) HasLastSyncAt() bool {
	if o != nil && o.LastSyncAt != nil {
		return true
	}

	return false
}

// SetLastSyncAt gets a reference to the given time.Time and assigns it to the LastSyncAt field.
func (o *SyncStateDto) SetLastSyncAt(v time.Time) {
	o.LastSyncAt = &v
}

// GetTagVersion returns the TagVersion field value if set, zero value otherwise.
func (o *SyncStateDto) GetTagVersion() int64 {
	if o == nil || o.TagVersion == nil {
		var ret int64
		return ret
	}
	return *o.TagVersion
}

// GetTagVersionOk returns a tuple with the TagVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncStateDto) GetTagVersionOk() (*int64, bool) {
	if o == nil || o.TagVersion == nil {
		return nil, false
	}
	return o.TagVersion, true
}

// HasTagVersion returns a boolean if a field has been set.
func (o *SyncStateDto) HasTagVersion() bool {
	if o != nil && o.TagVersion != nil {
		return true
	}

	return false
}

// SetTagVersion gets a reference to the given int64 and assigns it to the TagVersion field.
func (o *SyncStateDto) SetTagVersion(v int64) {
	o.TagVersion = &v
}

// GetItemVersion returns the ItemVersion field value if set, zero value otherwise.
func (o *SyncStateDto) GetItemVersion() int64 {
	if o == nil || o.ItemVersion == nil {
		var ret int64
		return ret
	}
	return *o.ItemVersion
}

// GetItemVersionOk returns a tuple with the ItemVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncStateDto) GetItemVersionOk() (*int64, bool) {
	if o == nil || o.ItemVersion == nil {
		return nil, false
	}
	return o.ItemVersion, true
}

// HasItemVersion returns a boolean if a field has been set.
func (o *SyncStateDto) HasItemVersion() bool {
	if o != nil && o.ItemVersion != nil {
		return true
	}

	return false
}

// SetItemVersion gets a reference to the given int64 and assigns it to the ItemVersion field.
func (o *SyncStateDto) SetItemVersion(v int64) {
	o.ItemVersion = &v
}

// GetTodoVersion returns the TodoVersion field value if set, zero value otherwise.
func (o *SyncStateDto) GetTodoVersion() int64 {
	if o == nil || o.TodoVersion == nil {
		var ret int64
		return ret
	}
	return *o.TodoVersion
}

// GetTodoVersionOk returns a tuple with the TodoVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyncStateDto) GetTodoVersionOk() (*int64, bool) {
	if o == nil || o.TodoVersion == nil {
		return nil, false
	}
	return o.TodoVersion, true
}

// HasTodoVersion returns a boolean if a field has been set.
func (o *SyncStateDto) HasTodoVersion() bool {
	if o != nil && o.TodoVersion != nil {
		return true
	}

	return false
}

// SetTodoVersion gets a reference to the given int64 and assigns it to the TodoVersion field.
func (o *SyncStateDto) SetTodoVersion(v int64) {
	o.TodoVersion = &v
}

func (o SyncStateDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LastSyncAt != nil {
		toSerialize["lastSyncAt"] = o.LastSyncAt
	}
	if o.TagVersion != nil {
		toSerialize["tagVersion"] = o.TagVersion
	}
	if o.ItemVersion != nil {
		toSerialize["itemVersion"] = o.ItemVersion
	}
	if o.TodoVersion != nil {
		toSerialize["todoVersion"] = o.TodoVersion
	}
	return json.Marshal(toSerialize)
}

type NullableSyncStateDto struct {
	value *SyncStateDto
	isSet bool
}

func (v NullableSyncStateDto) Get() *SyncStateDto {
	return v.value
}

func (v *NullableSyncStateDto) Set(val *SyncStateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSyncStateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSyncStateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyncStateDto(val *SyncStateDto) *NullableSyncStateDto {
	return &NullableSyncStateDto{value: val, isSet: true}
}

func (v NullableSyncStateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyncStateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


