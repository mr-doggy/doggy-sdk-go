/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"time"
)

// CreateUpdateItemDto struct for CreateUpdateItemDto
type CreateUpdateItemDto struct {
	Name NullableString `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Password NullableString `json:"password,omitempty"`
	ParentItemId NullableString `json:"parentItemId,omitempty"`
	TagIds []string `json:"tagIds,omitempty"`
	ThumbId NullableString `json:"thumbId,omitempty"`
	ThumbItemId NullableString `json:"thumbItemId,omitempty"`
	Key NullableString `json:"key,omitempty"`
	Md5 NullableString `json:"md5,omitempty"`
	ContentType NullableString `json:"contentType,omitempty"`
	Type *ItemType `json:"type,omitempty"`
	DisplayStyle *DisplayStyle `json:"displayStyle,omitempty"`
	Extension NullableString `json:"extension,omitempty"`
	StorageClass NullableString `json:"storageClass,omitempty"`
	FileCreatedAt NullableTime `json:"fileCreatedAt,omitempty"`
	FileUpdatedAt NullableTime `json:"fileUpdatedAt,omitempty"`
}

// NewCreateUpdateItemDto instantiates a new CreateUpdateItemDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUpdateItemDto() *CreateUpdateItemDto {
	this := CreateUpdateItemDto{}
	return &this
}

// NewCreateUpdateItemDtoWithDefaults instantiates a new CreateUpdateItemDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUpdateItemDtoWithDefaults() *CreateUpdateItemDto {
	this := CreateUpdateItemDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CreateUpdateItemDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CreateUpdateItemDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CreateUpdateItemDto) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CreateUpdateItemDto) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetDescription() {
	o.Description.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *CreateUpdateItemDto) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *CreateUpdateItemDto) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetPassword() {
	o.Password.Unset()
}

// GetParentItemId returns the ParentItemId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetParentItemId() string {
	if o == nil || o.ParentItemId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ParentItemId.Get()
}

// GetParentItemIdOk returns a tuple with the ParentItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetParentItemIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentItemId.Get(), o.ParentItemId.IsSet()
}

// HasParentItemId returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasParentItemId() bool {
	if o != nil && o.ParentItemId.IsSet() {
		return true
	}

	return false
}

// SetParentItemId gets a reference to the given NullableString and assigns it to the ParentItemId field.
func (o *CreateUpdateItemDto) SetParentItemId(v string) {
	o.ParentItemId.Set(&v)
}
// SetParentItemIdNil sets the value for ParentItemId to be an explicit nil
func (o *CreateUpdateItemDto) SetParentItemIdNil() {
	o.ParentItemId.Set(nil)
}

// UnsetParentItemId ensures that no value is present for ParentItemId, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetParentItemId() {
	o.ParentItemId.Unset()
}

// GetTagIds returns the TagIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetTagIds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.TagIds
}

// GetTagIdsOk returns a tuple with the TagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetTagIdsOk() (*[]string, bool) {
	if o == nil || o.TagIds == nil {
		return nil, false
	}
	return &o.TagIds, true
}

// HasTagIds returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasTagIds() bool {
	if o != nil && o.TagIds != nil {
		return true
	}

	return false
}

// SetTagIds gets a reference to the given []string and assigns it to the TagIds field.
func (o *CreateUpdateItemDto) SetTagIds(v []string) {
	o.TagIds = v
}

// GetThumbId returns the ThumbId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetThumbId() string {
	if o == nil || o.ThumbId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ThumbId.Get()
}

// GetThumbIdOk returns a tuple with the ThumbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetThumbIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ThumbId.Get(), o.ThumbId.IsSet()
}

// HasThumbId returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasThumbId() bool {
	if o != nil && o.ThumbId.IsSet() {
		return true
	}

	return false
}

// SetThumbId gets a reference to the given NullableString and assigns it to the ThumbId field.
func (o *CreateUpdateItemDto) SetThumbId(v string) {
	o.ThumbId.Set(&v)
}
// SetThumbIdNil sets the value for ThumbId to be an explicit nil
func (o *CreateUpdateItemDto) SetThumbIdNil() {
	o.ThumbId.Set(nil)
}

// UnsetThumbId ensures that no value is present for ThumbId, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetThumbId() {
	o.ThumbId.Unset()
}

// GetThumbItemId returns the ThumbItemId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetThumbItemId() string {
	if o == nil || o.ThumbItemId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ThumbItemId.Get()
}

// GetThumbItemIdOk returns a tuple with the ThumbItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetThumbItemIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ThumbItemId.Get(), o.ThumbItemId.IsSet()
}

// HasThumbItemId returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasThumbItemId() bool {
	if o != nil && o.ThumbItemId.IsSet() {
		return true
	}

	return false
}

// SetThumbItemId gets a reference to the given NullableString and assigns it to the ThumbItemId field.
func (o *CreateUpdateItemDto) SetThumbItemId(v string) {
	o.ThumbItemId.Set(&v)
}
// SetThumbItemIdNil sets the value for ThumbItemId to be an explicit nil
func (o *CreateUpdateItemDto) SetThumbItemIdNil() {
	o.ThumbItemId.Set(nil)
}

// UnsetThumbItemId ensures that no value is present for ThumbItemId, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetThumbItemId() {
	o.ThumbItemId.Unset()
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetKey() string {
	if o == nil || o.Key.Get() == nil {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *CreateUpdateItemDto) SetKey(v string) {
	o.Key.Set(&v)
}
// SetKeyNil sets the value for Key to be an explicit nil
func (o *CreateUpdateItemDto) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetKey() {
	o.Key.Unset()
}

// GetMd5 returns the Md5 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetMd5() string {
	if o == nil || o.Md5.Get() == nil {
		var ret string
		return ret
	}
	return *o.Md5.Get()
}

// GetMd5Ok returns a tuple with the Md5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetMd5Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Md5.Get(), o.Md5.IsSet()
}

// HasMd5 returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasMd5() bool {
	if o != nil && o.Md5.IsSet() {
		return true
	}

	return false
}

// SetMd5 gets a reference to the given NullableString and assigns it to the Md5 field.
func (o *CreateUpdateItemDto) SetMd5(v string) {
	o.Md5.Set(&v)
}
// SetMd5Nil sets the value for Md5 to be an explicit nil
func (o *CreateUpdateItemDto) SetMd5Nil() {
	o.Md5.Set(nil)
}

// UnsetMd5 ensures that no value is present for Md5, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetMd5() {
	o.Md5.Unset()
}

// GetContentType returns the ContentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetContentType() string {
	if o == nil || o.ContentType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ContentType.Get()
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetContentTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContentType.Get(), o.ContentType.IsSet()
}

// HasContentType returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasContentType() bool {
	if o != nil && o.ContentType.IsSet() {
		return true
	}

	return false
}

// SetContentType gets a reference to the given NullableString and assigns it to the ContentType field.
func (o *CreateUpdateItemDto) SetContentType(v string) {
	o.ContentType.Set(&v)
}
// SetContentTypeNil sets the value for ContentType to be an explicit nil
func (o *CreateUpdateItemDto) SetContentTypeNil() {
	o.ContentType.Set(nil)
}

// UnsetContentType ensures that no value is present for ContentType, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetContentType() {
	o.ContentType.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreateUpdateItemDto) GetType() ItemType {
	if o == nil || o.Type == nil {
		var ret ItemType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateItemDto) GetTypeOk() (*ItemType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given ItemType and assigns it to the Type field.
func (o *CreateUpdateItemDto) SetType(v ItemType) {
	o.Type = &v
}

// GetDisplayStyle returns the DisplayStyle field value if set, zero value otherwise.
func (o *CreateUpdateItemDto) GetDisplayStyle() DisplayStyle {
	if o == nil || o.DisplayStyle == nil {
		var ret DisplayStyle
		return ret
	}
	return *o.DisplayStyle
}

// GetDisplayStyleOk returns a tuple with the DisplayStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUpdateItemDto) GetDisplayStyleOk() (*DisplayStyle, bool) {
	if o == nil || o.DisplayStyle == nil {
		return nil, false
	}
	return o.DisplayStyle, true
}

// HasDisplayStyle returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasDisplayStyle() bool {
	if o != nil && o.DisplayStyle != nil {
		return true
	}

	return false
}

// SetDisplayStyle gets a reference to the given DisplayStyle and assigns it to the DisplayStyle field.
func (o *CreateUpdateItemDto) SetDisplayStyle(v DisplayStyle) {
	o.DisplayStyle = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetExtension() string {
	if o == nil || o.Extension.Get() == nil {
		var ret string
		return ret
	}
	return *o.Extension.Get()
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetExtensionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Extension.Get(), o.Extension.IsSet()
}

// HasExtension returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasExtension() bool {
	if o != nil && o.Extension.IsSet() {
		return true
	}

	return false
}

// SetExtension gets a reference to the given NullableString and assigns it to the Extension field.
func (o *CreateUpdateItemDto) SetExtension(v string) {
	o.Extension.Set(&v)
}
// SetExtensionNil sets the value for Extension to be an explicit nil
func (o *CreateUpdateItemDto) SetExtensionNil() {
	o.Extension.Set(nil)
}

// UnsetExtension ensures that no value is present for Extension, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetExtension() {
	o.Extension.Unset()
}

// GetStorageClass returns the StorageClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetStorageClass() string {
	if o == nil || o.StorageClass.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageClass.Get()
}

// GetStorageClassOk returns a tuple with the StorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetStorageClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageClass.Get(), o.StorageClass.IsSet()
}

// HasStorageClass returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasStorageClass() bool {
	if o != nil && o.StorageClass.IsSet() {
		return true
	}

	return false
}

// SetStorageClass gets a reference to the given NullableString and assigns it to the StorageClass field.
func (o *CreateUpdateItemDto) SetStorageClass(v string) {
	o.StorageClass.Set(&v)
}
// SetStorageClassNil sets the value for StorageClass to be an explicit nil
func (o *CreateUpdateItemDto) SetStorageClassNil() {
	o.StorageClass.Set(nil)
}

// UnsetStorageClass ensures that no value is present for StorageClass, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetStorageClass() {
	o.StorageClass.Unset()
}

// GetFileCreatedAt returns the FileCreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetFileCreatedAt() time.Time {
	if o == nil || o.FileCreatedAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.FileCreatedAt.Get()
}

// GetFileCreatedAtOk returns a tuple with the FileCreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetFileCreatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileCreatedAt.Get(), o.FileCreatedAt.IsSet()
}

// HasFileCreatedAt returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasFileCreatedAt() bool {
	if o != nil && o.FileCreatedAt.IsSet() {
		return true
	}

	return false
}

// SetFileCreatedAt gets a reference to the given NullableTime and assigns it to the FileCreatedAt field.
func (o *CreateUpdateItemDto) SetFileCreatedAt(v time.Time) {
	o.FileCreatedAt.Set(&v)
}
// SetFileCreatedAtNil sets the value for FileCreatedAt to be an explicit nil
func (o *CreateUpdateItemDto) SetFileCreatedAtNil() {
	o.FileCreatedAt.Set(nil)
}

// UnsetFileCreatedAt ensures that no value is present for FileCreatedAt, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetFileCreatedAt() {
	o.FileCreatedAt.Unset()
}

// GetFileUpdatedAt returns the FileUpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUpdateItemDto) GetFileUpdatedAt() time.Time {
	if o == nil || o.FileUpdatedAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.FileUpdatedAt.Get()
}

// GetFileUpdatedAtOk returns a tuple with the FileUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUpdateItemDto) GetFileUpdatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileUpdatedAt.Get(), o.FileUpdatedAt.IsSet()
}

// HasFileUpdatedAt returns a boolean if a field has been set.
func (o *CreateUpdateItemDto) HasFileUpdatedAt() bool {
	if o != nil && o.FileUpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetFileUpdatedAt gets a reference to the given NullableTime and assigns it to the FileUpdatedAt field.
func (o *CreateUpdateItemDto) SetFileUpdatedAt(v time.Time) {
	o.FileUpdatedAt.Set(&v)
}
// SetFileUpdatedAtNil sets the value for FileUpdatedAt to be an explicit nil
func (o *CreateUpdateItemDto) SetFileUpdatedAtNil() {
	o.FileUpdatedAt.Set(nil)
}

// UnsetFileUpdatedAt ensures that no value is present for FileUpdatedAt, not even an explicit nil
func (o *CreateUpdateItemDto) UnsetFileUpdatedAt() {
	o.FileUpdatedAt.Unset()
}

func (o CreateUpdateItemDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.ParentItemId.IsSet() {
		toSerialize["parentItemId"] = o.ParentItemId.Get()
	}
	if o.TagIds != nil {
		toSerialize["tagIds"] = o.TagIds
	}
	if o.ThumbId.IsSet() {
		toSerialize["thumbId"] = o.ThumbId.Get()
	}
	if o.ThumbItemId.IsSet() {
		toSerialize["thumbItemId"] = o.ThumbItemId.Get()
	}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	if o.Md5.IsSet() {
		toSerialize["md5"] = o.Md5.Get()
	}
	if o.ContentType.IsSet() {
		toSerialize["contentType"] = o.ContentType.Get()
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.DisplayStyle != nil {
		toSerialize["displayStyle"] = o.DisplayStyle
	}
	if o.Extension.IsSet() {
		toSerialize["extension"] = o.Extension.Get()
	}
	if o.StorageClass.IsSet() {
		toSerialize["storageClass"] = o.StorageClass.Get()
	}
	if o.FileCreatedAt.IsSet() {
		toSerialize["fileCreatedAt"] = o.FileCreatedAt.Get()
	}
	if o.FileUpdatedAt.IsSet() {
		toSerialize["fileUpdatedAt"] = o.FileUpdatedAt.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateUpdateItemDto struct {
	value *CreateUpdateItemDto
	isSet bool
}

func (v NullableCreateUpdateItemDto) Get() *CreateUpdateItemDto {
	return v.value
}

func (v *NullableCreateUpdateItemDto) Set(val *CreateUpdateItemDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUpdateItemDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUpdateItemDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUpdateItemDto(val *CreateUpdateItemDto) *NullableCreateUpdateItemDto {
	return &NullableCreateUpdateItemDto{value: val, isSet: true}
}

func (v NullableCreateUpdateItemDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUpdateItemDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


