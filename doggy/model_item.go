/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"time"
)

// Item struct for Item
type Item struct {
	Id *string `json:"id,omitempty"`
	ExtraProperties map[string]interface{} `json:"extraProperties,omitempty"`
	ConcurrencyStamp NullableString `json:"concurrencyStamp,omitempty"`
	CreationTime *time.Time `json:"creationTime,omitempty"`
	CreatorId NullableString `json:"creatorId,omitempty"`
	LastModificationTime NullableTime `json:"lastModificationTime,omitempty"`
	LastModifierId NullableString `json:"lastModifierId,omitempty"`
	IsDeleted *bool `json:"isDeleted,omitempty"`
	DeleterId NullableString `json:"deleterId,omitempty"`
	DeletionTime NullableTime `json:"deletionTime,omitempty"`
	Deleter *IdentityUser `json:"deleter,omitempty"`
	Creator *IdentityUser `json:"creator,omitempty"`
	LastModifier *IdentityUser `json:"lastModifier,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	TotalCount *int32 `json:"totalCount,omitempty"`
	Password NullableString `json:"password,omitempty"`
	ParentItemId NullableString `json:"parentItemId,omitempty"`
	ParentItem *Item `json:"parentItem,omitempty"`
	Children []Item `json:"children,omitempty"`
	ThumbId NullableString `json:"thumbId,omitempty"`
	Thumb *ItemThumb `json:"thumb,omitempty"`
	Key NullableString `json:"key,omitempty"`
	Size *int64 `json:"size,omitempty"`
	Md5 NullableString `json:"md5,omitempty"`
	ContentType NullableString `json:"contentType,omitempty"`
	Type *ItemType `json:"type,omitempty"`
	Extension NullableString `json:"extension,omitempty"`
	StorageClass NullableString `json:"storageClass,omitempty"`
	FileCreatedAt NullableTime `json:"fileCreatedAt,omitempty"`
	FileUpdatedAt NullableTime `json:"fileUpdatedAt,omitempty"`
	FileId NullableString `json:"fileId,omitempty"`
	File *File `json:"file,omitempty"`
	DisplayStyle *DisplayStyle `json:"displayStyle,omitempty"`
	Tags []Tag `json:"tags,omitempty"`
	ItemTags []ItemTag `json:"itemTags,omitempty"`
}

// NewItem instantiates a new Item object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItem() *Item {
	this := Item{}
	return &this
}

// NewItemWithDefaults instantiates a new Item object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemWithDefaults() *Item {
	this := Item{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Item) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Item) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Item) SetId(v string) {
	o.Id = &v
}

// GetExtraProperties returns the ExtraProperties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetExtraProperties() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.ExtraProperties
}

// GetExtraPropertiesOk returns a tuple with the ExtraProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetExtraPropertiesOk() (*map[string]interface{}, bool) {
	if o == nil || o.ExtraProperties == nil {
		return nil, false
	}
	return &o.ExtraProperties, true
}

// HasExtraProperties returns a boolean if a field has been set.
func (o *Item) HasExtraProperties() bool {
	if o != nil && o.ExtraProperties != nil {
		return true
	}

	return false
}

// SetExtraProperties gets a reference to the given map[string]interface{} and assigns it to the ExtraProperties field.
func (o *Item) SetExtraProperties(v map[string]interface{}) {
	o.ExtraProperties = v
}

// GetConcurrencyStamp returns the ConcurrencyStamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetConcurrencyStamp() string {
	if o == nil || o.ConcurrencyStamp.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConcurrencyStamp.Get()
}

// GetConcurrencyStampOk returns a tuple with the ConcurrencyStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetConcurrencyStampOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConcurrencyStamp.Get(), o.ConcurrencyStamp.IsSet()
}

// HasConcurrencyStamp returns a boolean if a field has been set.
func (o *Item) HasConcurrencyStamp() bool {
	if o != nil && o.ConcurrencyStamp.IsSet() {
		return true
	}

	return false
}

// SetConcurrencyStamp gets a reference to the given NullableString and assigns it to the ConcurrencyStamp field.
func (o *Item) SetConcurrencyStamp(v string) {
	o.ConcurrencyStamp.Set(&v)
}
// SetConcurrencyStampNil sets the value for ConcurrencyStamp to be an explicit nil
func (o *Item) SetConcurrencyStampNil() {
	o.ConcurrencyStamp.Set(nil)
}

// UnsetConcurrencyStamp ensures that no value is present for ConcurrencyStamp, not even an explicit nil
func (o *Item) UnsetConcurrencyStamp() {
	o.ConcurrencyStamp.Unset()
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *Item) GetCreationTime() time.Time {
	if o == nil || o.CreationTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || o.CreationTime == nil {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *Item) HasCreationTime() bool {
	if o != nil && o.CreationTime != nil {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *Item) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetCreatorId() string {
	if o == nil || o.CreatorId.Get() == nil {
		var ret string
		return ret
	}
	return *o.CreatorId.Get()
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetCreatorIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatorId.Get(), o.CreatorId.IsSet()
}

// HasCreatorId returns a boolean if a field has been set.
func (o *Item) HasCreatorId() bool {
	if o != nil && o.CreatorId.IsSet() {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given NullableString and assigns it to the CreatorId field.
func (o *Item) SetCreatorId(v string) {
	o.CreatorId.Set(&v)
}
// SetCreatorIdNil sets the value for CreatorId to be an explicit nil
func (o *Item) SetCreatorIdNil() {
	o.CreatorId.Set(nil)
}

// UnsetCreatorId ensures that no value is present for CreatorId, not even an explicit nil
func (o *Item) UnsetCreatorId() {
	o.CreatorId.Unset()
}

// GetLastModificationTime returns the LastModificationTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetLastModificationTime() time.Time {
	if o == nil || o.LastModificationTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LastModificationTime.Get()
}

// GetLastModificationTimeOk returns a tuple with the LastModificationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetLastModificationTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastModificationTime.Get(), o.LastModificationTime.IsSet()
}

// HasLastModificationTime returns a boolean if a field has been set.
func (o *Item) HasLastModificationTime() bool {
	if o != nil && o.LastModificationTime.IsSet() {
		return true
	}

	return false
}

// SetLastModificationTime gets a reference to the given NullableTime and assigns it to the LastModificationTime field.
func (o *Item) SetLastModificationTime(v time.Time) {
	o.LastModificationTime.Set(&v)
}
// SetLastModificationTimeNil sets the value for LastModificationTime to be an explicit nil
func (o *Item) SetLastModificationTimeNil() {
	o.LastModificationTime.Set(nil)
}

// UnsetLastModificationTime ensures that no value is present for LastModificationTime, not even an explicit nil
func (o *Item) UnsetLastModificationTime() {
	o.LastModificationTime.Unset()
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetLastModifierId() string {
	if o == nil || o.LastModifierId.Get() == nil {
		var ret string
		return ret
	}
	return *o.LastModifierId.Get()
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetLastModifierIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastModifierId.Get(), o.LastModifierId.IsSet()
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *Item) HasLastModifierId() bool {
	if o != nil && o.LastModifierId.IsSet() {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given NullableString and assigns it to the LastModifierId field.
func (o *Item) SetLastModifierId(v string) {
	o.LastModifierId.Set(&v)
}
// SetLastModifierIdNil sets the value for LastModifierId to be an explicit nil
func (o *Item) SetLastModifierIdNil() {
	o.LastModifierId.Set(nil)
}

// UnsetLastModifierId ensures that no value is present for LastModifierId, not even an explicit nil
func (o *Item) UnsetLastModifierId() {
	o.LastModifierId.Unset()
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *Item) GetIsDeleted() bool {
	if o == nil || o.IsDeleted == nil {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetIsDeletedOk() (*bool, bool) {
	if o == nil || o.IsDeleted == nil {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *Item) HasIsDeleted() bool {
	if o != nil && o.IsDeleted != nil {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *Item) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetDeleterId returns the DeleterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetDeleterId() string {
	if o == nil || o.DeleterId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DeleterId.Get()
}

// GetDeleterIdOk returns a tuple with the DeleterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetDeleterIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeleterId.Get(), o.DeleterId.IsSet()
}

// HasDeleterId returns a boolean if a field has been set.
func (o *Item) HasDeleterId() bool {
	if o != nil && o.DeleterId.IsSet() {
		return true
	}

	return false
}

// SetDeleterId gets a reference to the given NullableString and assigns it to the DeleterId field.
func (o *Item) SetDeleterId(v string) {
	o.DeleterId.Set(&v)
}
// SetDeleterIdNil sets the value for DeleterId to be an explicit nil
func (o *Item) SetDeleterIdNil() {
	o.DeleterId.Set(nil)
}

// UnsetDeleterId ensures that no value is present for DeleterId, not even an explicit nil
func (o *Item) UnsetDeleterId() {
	o.DeleterId.Unset()
}

// GetDeletionTime returns the DeletionTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetDeletionTime() time.Time {
	if o == nil || o.DeletionTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.DeletionTime.Get()
}

// GetDeletionTimeOk returns a tuple with the DeletionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetDeletionTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeletionTime.Get(), o.DeletionTime.IsSet()
}

// HasDeletionTime returns a boolean if a field has been set.
func (o *Item) HasDeletionTime() bool {
	if o != nil && o.DeletionTime.IsSet() {
		return true
	}

	return false
}

// SetDeletionTime gets a reference to the given NullableTime and assigns it to the DeletionTime field.
func (o *Item) SetDeletionTime(v time.Time) {
	o.DeletionTime.Set(&v)
}
// SetDeletionTimeNil sets the value for DeletionTime to be an explicit nil
func (o *Item) SetDeletionTimeNil() {
	o.DeletionTime.Set(nil)
}

// UnsetDeletionTime ensures that no value is present for DeletionTime, not even an explicit nil
func (o *Item) UnsetDeletionTime() {
	o.DeletionTime.Unset()
}

// GetDeleter returns the Deleter field value if set, zero value otherwise.
func (o *Item) GetDeleter() IdentityUser {
	if o == nil || o.Deleter == nil {
		var ret IdentityUser
		return ret
	}
	return *o.Deleter
}

// GetDeleterOk returns a tuple with the Deleter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetDeleterOk() (*IdentityUser, bool) {
	if o == nil || o.Deleter == nil {
		return nil, false
	}
	return o.Deleter, true
}

// HasDeleter returns a boolean if a field has been set.
func (o *Item) HasDeleter() bool {
	if o != nil && o.Deleter != nil {
		return true
	}

	return false
}

// SetDeleter gets a reference to the given IdentityUser and assigns it to the Deleter field.
func (o *Item) SetDeleter(v IdentityUser) {
	o.Deleter = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *Item) GetCreator() IdentityUser {
	if o == nil || o.Creator == nil {
		var ret IdentityUser
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetCreatorOk() (*IdentityUser, bool) {
	if o == nil || o.Creator == nil {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *Item) HasCreator() bool {
	if o != nil && o.Creator != nil {
		return true
	}

	return false
}

// SetCreator gets a reference to the given IdentityUser and assigns it to the Creator field.
func (o *Item) SetCreator(v IdentityUser) {
	o.Creator = &v
}

// GetLastModifier returns the LastModifier field value if set, zero value otherwise.
func (o *Item) GetLastModifier() IdentityUser {
	if o == nil || o.LastModifier == nil {
		var ret IdentityUser
		return ret
	}
	return *o.LastModifier
}

// GetLastModifierOk returns a tuple with the LastModifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetLastModifierOk() (*IdentityUser, bool) {
	if o == nil || o.LastModifier == nil {
		return nil, false
	}
	return o.LastModifier, true
}

// HasLastModifier returns a boolean if a field has been set.
func (o *Item) HasLastModifier() bool {
	if o != nil && o.LastModifier != nil {
		return true
	}

	return false
}

// SetLastModifier gets a reference to the given IdentityUser and assigns it to the LastModifier field.
func (o *Item) SetLastModifier(v IdentityUser) {
	o.LastModifier = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Item) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Item) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Item) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Item) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Item) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Item) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Item) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Item) UnsetDescription() {
	o.Description.Unset()
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *Item) GetTotalCount() int32 {
	if o == nil || o.TotalCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetTotalCountOk() (*int32, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *Item) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *Item) SetTotalCount(v int32) {
	o.TotalCount = &v
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *Item) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *Item) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *Item) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *Item) UnsetPassword() {
	o.Password.Unset()
}

// GetParentItemId returns the ParentItemId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetParentItemId() string {
	if o == nil || o.ParentItemId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ParentItemId.Get()
}

// GetParentItemIdOk returns a tuple with the ParentItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetParentItemIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentItemId.Get(), o.ParentItemId.IsSet()
}

// HasParentItemId returns a boolean if a field has been set.
func (o *Item) HasParentItemId() bool {
	if o != nil && o.ParentItemId.IsSet() {
		return true
	}

	return false
}

// SetParentItemId gets a reference to the given NullableString and assigns it to the ParentItemId field.
func (o *Item) SetParentItemId(v string) {
	o.ParentItemId.Set(&v)
}
// SetParentItemIdNil sets the value for ParentItemId to be an explicit nil
func (o *Item) SetParentItemIdNil() {
	o.ParentItemId.Set(nil)
}

// UnsetParentItemId ensures that no value is present for ParentItemId, not even an explicit nil
func (o *Item) UnsetParentItemId() {
	o.ParentItemId.Unset()
}

// GetParentItem returns the ParentItem field value if set, zero value otherwise.
func (o *Item) GetParentItem() Item {
	if o == nil || o.ParentItem == nil {
		var ret Item
		return ret
	}
	return *o.ParentItem
}

// GetParentItemOk returns a tuple with the ParentItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetParentItemOk() (*Item, bool) {
	if o == nil || o.ParentItem == nil {
		return nil, false
	}
	return o.ParentItem, true
}

// HasParentItem returns a boolean if a field has been set.
func (o *Item) HasParentItem() bool {
	if o != nil && o.ParentItem != nil {
		return true
	}

	return false
}

// SetParentItem gets a reference to the given Item and assigns it to the ParentItem field.
func (o *Item) SetParentItem(v Item) {
	o.ParentItem = &v
}

// GetChildren returns the Children field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetChildren() []Item {
	if o == nil  {
		var ret []Item
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetChildrenOk() (*[]Item, bool) {
	if o == nil || o.Children == nil {
		return nil, false
	}
	return &o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *Item) HasChildren() bool {
	if o != nil && o.Children != nil {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []Item and assigns it to the Children field.
func (o *Item) SetChildren(v []Item) {
	o.Children = v
}

// GetThumbId returns the ThumbId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetThumbId() string {
	if o == nil || o.ThumbId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ThumbId.Get()
}

// GetThumbIdOk returns a tuple with the ThumbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetThumbIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ThumbId.Get(), o.ThumbId.IsSet()
}

// HasThumbId returns a boolean if a field has been set.
func (o *Item) HasThumbId() bool {
	if o != nil && o.ThumbId.IsSet() {
		return true
	}

	return false
}

// SetThumbId gets a reference to the given NullableString and assigns it to the ThumbId field.
func (o *Item) SetThumbId(v string) {
	o.ThumbId.Set(&v)
}
// SetThumbIdNil sets the value for ThumbId to be an explicit nil
func (o *Item) SetThumbIdNil() {
	o.ThumbId.Set(nil)
}

// UnsetThumbId ensures that no value is present for ThumbId, not even an explicit nil
func (o *Item) UnsetThumbId() {
	o.ThumbId.Unset()
}

// GetThumb returns the Thumb field value if set, zero value otherwise.
func (o *Item) GetThumb() ItemThumb {
	if o == nil || o.Thumb == nil {
		var ret ItemThumb
		return ret
	}
	return *o.Thumb
}

// GetThumbOk returns a tuple with the Thumb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetThumbOk() (*ItemThumb, bool) {
	if o == nil || o.Thumb == nil {
		return nil, false
	}
	return o.Thumb, true
}

// HasThumb returns a boolean if a field has been set.
func (o *Item) HasThumb() bool {
	if o != nil && o.Thumb != nil {
		return true
	}

	return false
}

// SetThumb gets a reference to the given ItemThumb and assigns it to the Thumb field.
func (o *Item) SetThumb(v ItemThumb) {
	o.Thumb = &v
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetKey() string {
	if o == nil || o.Key.Get() == nil {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *Item) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *Item) SetKey(v string) {
	o.Key.Set(&v)
}
// SetKeyNil sets the value for Key to be an explicit nil
func (o *Item) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *Item) UnsetKey() {
	o.Key.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Item) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Item) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *Item) SetSize(v int64) {
	o.Size = &v
}

// GetMd5 returns the Md5 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetMd5() string {
	if o == nil || o.Md5.Get() == nil {
		var ret string
		return ret
	}
	return *o.Md5.Get()
}

// GetMd5Ok returns a tuple with the Md5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetMd5Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Md5.Get(), o.Md5.IsSet()
}

// HasMd5 returns a boolean if a field has been set.
func (o *Item) HasMd5() bool {
	if o != nil && o.Md5.IsSet() {
		return true
	}

	return false
}

// SetMd5 gets a reference to the given NullableString and assigns it to the Md5 field.
func (o *Item) SetMd5(v string) {
	o.Md5.Set(&v)
}
// SetMd5Nil sets the value for Md5 to be an explicit nil
func (o *Item) SetMd5Nil() {
	o.Md5.Set(nil)
}

// UnsetMd5 ensures that no value is present for Md5, not even an explicit nil
func (o *Item) UnsetMd5() {
	o.Md5.Unset()
}

// GetContentType returns the ContentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetContentType() string {
	if o == nil || o.ContentType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ContentType.Get()
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetContentTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContentType.Get(), o.ContentType.IsSet()
}

// HasContentType returns a boolean if a field has been set.
func (o *Item) HasContentType() bool {
	if o != nil && o.ContentType.IsSet() {
		return true
	}

	return false
}

// SetContentType gets a reference to the given NullableString and assigns it to the ContentType field.
func (o *Item) SetContentType(v string) {
	o.ContentType.Set(&v)
}
// SetContentTypeNil sets the value for ContentType to be an explicit nil
func (o *Item) SetContentTypeNil() {
	o.ContentType.Set(nil)
}

// UnsetContentType ensures that no value is present for ContentType, not even an explicit nil
func (o *Item) UnsetContentType() {
	o.ContentType.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Item) GetType() ItemType {
	if o == nil || o.Type == nil {
		var ret ItemType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetTypeOk() (*ItemType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Item) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given ItemType and assigns it to the Type field.
func (o *Item) SetType(v ItemType) {
	o.Type = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetExtension() string {
	if o == nil || o.Extension.Get() == nil {
		var ret string
		return ret
	}
	return *o.Extension.Get()
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetExtensionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Extension.Get(), o.Extension.IsSet()
}

// HasExtension returns a boolean if a field has been set.
func (o *Item) HasExtension() bool {
	if o != nil && o.Extension.IsSet() {
		return true
	}

	return false
}

// SetExtension gets a reference to the given NullableString and assigns it to the Extension field.
func (o *Item) SetExtension(v string) {
	o.Extension.Set(&v)
}
// SetExtensionNil sets the value for Extension to be an explicit nil
func (o *Item) SetExtensionNil() {
	o.Extension.Set(nil)
}

// UnsetExtension ensures that no value is present for Extension, not even an explicit nil
func (o *Item) UnsetExtension() {
	o.Extension.Unset()
}

// GetStorageClass returns the StorageClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetStorageClass() string {
	if o == nil || o.StorageClass.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageClass.Get()
}

// GetStorageClassOk returns a tuple with the StorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetStorageClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageClass.Get(), o.StorageClass.IsSet()
}

// HasStorageClass returns a boolean if a field has been set.
func (o *Item) HasStorageClass() bool {
	if o != nil && o.StorageClass.IsSet() {
		return true
	}

	return false
}

// SetStorageClass gets a reference to the given NullableString and assigns it to the StorageClass field.
func (o *Item) SetStorageClass(v string) {
	o.StorageClass.Set(&v)
}
// SetStorageClassNil sets the value for StorageClass to be an explicit nil
func (o *Item) SetStorageClassNil() {
	o.StorageClass.Set(nil)
}

// UnsetStorageClass ensures that no value is present for StorageClass, not even an explicit nil
func (o *Item) UnsetStorageClass() {
	o.StorageClass.Unset()
}

// GetFileCreatedAt returns the FileCreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetFileCreatedAt() time.Time {
	if o == nil || o.FileCreatedAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.FileCreatedAt.Get()
}

// GetFileCreatedAtOk returns a tuple with the FileCreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetFileCreatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileCreatedAt.Get(), o.FileCreatedAt.IsSet()
}

// HasFileCreatedAt returns a boolean if a field has been set.
func (o *Item) HasFileCreatedAt() bool {
	if o != nil && o.FileCreatedAt.IsSet() {
		return true
	}

	return false
}

// SetFileCreatedAt gets a reference to the given NullableTime and assigns it to the FileCreatedAt field.
func (o *Item) SetFileCreatedAt(v time.Time) {
	o.FileCreatedAt.Set(&v)
}
// SetFileCreatedAtNil sets the value for FileCreatedAt to be an explicit nil
func (o *Item) SetFileCreatedAtNil() {
	o.FileCreatedAt.Set(nil)
}

// UnsetFileCreatedAt ensures that no value is present for FileCreatedAt, not even an explicit nil
func (o *Item) UnsetFileCreatedAt() {
	o.FileCreatedAt.Unset()
}

// GetFileUpdatedAt returns the FileUpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetFileUpdatedAt() time.Time {
	if o == nil || o.FileUpdatedAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.FileUpdatedAt.Get()
}

// GetFileUpdatedAtOk returns a tuple with the FileUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetFileUpdatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileUpdatedAt.Get(), o.FileUpdatedAt.IsSet()
}

// HasFileUpdatedAt returns a boolean if a field has been set.
func (o *Item) HasFileUpdatedAt() bool {
	if o != nil && o.FileUpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetFileUpdatedAt gets a reference to the given NullableTime and assigns it to the FileUpdatedAt field.
func (o *Item) SetFileUpdatedAt(v time.Time) {
	o.FileUpdatedAt.Set(&v)
}
// SetFileUpdatedAtNil sets the value for FileUpdatedAt to be an explicit nil
func (o *Item) SetFileUpdatedAtNil() {
	o.FileUpdatedAt.Set(nil)
}

// UnsetFileUpdatedAt ensures that no value is present for FileUpdatedAt, not even an explicit nil
func (o *Item) UnsetFileUpdatedAt() {
	o.FileUpdatedAt.Unset()
}

// GetFileId returns the FileId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetFileId() string {
	if o == nil || o.FileId.Get() == nil {
		var ret string
		return ret
	}
	return *o.FileId.Get()
}

// GetFileIdOk returns a tuple with the FileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetFileIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileId.Get(), o.FileId.IsSet()
}

// HasFileId returns a boolean if a field has been set.
func (o *Item) HasFileId() bool {
	if o != nil && o.FileId.IsSet() {
		return true
	}

	return false
}

// SetFileId gets a reference to the given NullableString and assigns it to the FileId field.
func (o *Item) SetFileId(v string) {
	o.FileId.Set(&v)
}
// SetFileIdNil sets the value for FileId to be an explicit nil
func (o *Item) SetFileIdNil() {
	o.FileId.Set(nil)
}

// UnsetFileId ensures that no value is present for FileId, not even an explicit nil
func (o *Item) UnsetFileId() {
	o.FileId.Unset()
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *Item) GetFile() File {
	if o == nil || o.File == nil {
		var ret File
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetFileOk() (*File, bool) {
	if o == nil || o.File == nil {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *Item) HasFile() bool {
	if o != nil && o.File != nil {
		return true
	}

	return false
}

// SetFile gets a reference to the given File and assigns it to the File field.
func (o *Item) SetFile(v File) {
	o.File = &v
}

// GetDisplayStyle returns the DisplayStyle field value if set, zero value otherwise.
func (o *Item) GetDisplayStyle() DisplayStyle {
	if o == nil || o.DisplayStyle == nil {
		var ret DisplayStyle
		return ret
	}
	return *o.DisplayStyle
}

// GetDisplayStyleOk returns a tuple with the DisplayStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Item) GetDisplayStyleOk() (*DisplayStyle, bool) {
	if o == nil || o.DisplayStyle == nil {
		return nil, false
	}
	return o.DisplayStyle, true
}

// HasDisplayStyle returns a boolean if a field has been set.
func (o *Item) HasDisplayStyle() bool {
	if o != nil && o.DisplayStyle != nil {
		return true
	}

	return false
}

// SetDisplayStyle gets a reference to the given DisplayStyle and assigns it to the DisplayStyle field.
func (o *Item) SetDisplayStyle(v DisplayStyle) {
	o.DisplayStyle = &v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetTags() []Tag {
	if o == nil  {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetTagsOk() (*[]Tag, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return &o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Item) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *Item) SetTags(v []Tag) {
	o.Tags = v
}

// GetItemTags returns the ItemTags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Item) GetItemTags() []ItemTag {
	if o == nil  {
		var ret []ItemTag
		return ret
	}
	return o.ItemTags
}

// GetItemTagsOk returns a tuple with the ItemTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Item) GetItemTagsOk() (*[]ItemTag, bool) {
	if o == nil || o.ItemTags == nil {
		return nil, false
	}
	return &o.ItemTags, true
}

// HasItemTags returns a boolean if a field has been set.
func (o *Item) HasItemTags() bool {
	if o != nil && o.ItemTags != nil {
		return true
	}

	return false
}

// SetItemTags gets a reference to the given []ItemTag and assigns it to the ItemTags field.
func (o *Item) SetItemTags(v []ItemTag) {
	o.ItemTags = v
}

func (o Item) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ExtraProperties != nil {
		toSerialize["extraProperties"] = o.ExtraProperties
	}
	if o.ConcurrencyStamp.IsSet() {
		toSerialize["concurrencyStamp"] = o.ConcurrencyStamp.Get()
	}
	if o.CreationTime != nil {
		toSerialize["creationTime"] = o.CreationTime
	}
	if o.CreatorId.IsSet() {
		toSerialize["creatorId"] = o.CreatorId.Get()
	}
	if o.LastModificationTime.IsSet() {
		toSerialize["lastModificationTime"] = o.LastModificationTime.Get()
	}
	if o.LastModifierId.IsSet() {
		toSerialize["lastModifierId"] = o.LastModifierId.Get()
	}
	if o.IsDeleted != nil {
		toSerialize["isDeleted"] = o.IsDeleted
	}
	if o.DeleterId.IsSet() {
		toSerialize["deleterId"] = o.DeleterId.Get()
	}
	if o.DeletionTime.IsSet() {
		toSerialize["deletionTime"] = o.DeletionTime.Get()
	}
	if o.Deleter != nil {
		toSerialize["deleter"] = o.Deleter
	}
	if o.Creator != nil {
		toSerialize["creator"] = o.Creator
	}
	if o.LastModifier != nil {
		toSerialize["lastModifier"] = o.LastModifier
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.TotalCount != nil {
		toSerialize["totalCount"] = o.TotalCount
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.ParentItemId.IsSet() {
		toSerialize["parentItemId"] = o.ParentItemId.Get()
	}
	if o.ParentItem != nil {
		toSerialize["parentItem"] = o.ParentItem
	}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}
	if o.ThumbId.IsSet() {
		toSerialize["thumbId"] = o.ThumbId.Get()
	}
	if o.Thumb != nil {
		toSerialize["thumb"] = o.Thumb
	}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Md5.IsSet() {
		toSerialize["md5"] = o.Md5.Get()
	}
	if o.ContentType.IsSet() {
		toSerialize["contentType"] = o.ContentType.Get()
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Extension.IsSet() {
		toSerialize["extension"] = o.Extension.Get()
	}
	if o.StorageClass.IsSet() {
		toSerialize["storageClass"] = o.StorageClass.Get()
	}
	if o.FileCreatedAt.IsSet() {
		toSerialize["fileCreatedAt"] = o.FileCreatedAt.Get()
	}
	if o.FileUpdatedAt.IsSet() {
		toSerialize["fileUpdatedAt"] = o.FileUpdatedAt.Get()
	}
	if o.FileId.IsSet() {
		toSerialize["fileId"] = o.FileId.Get()
	}
	if o.File != nil {
		toSerialize["file"] = o.File
	}
	if o.DisplayStyle != nil {
		toSerialize["displayStyle"] = o.DisplayStyle
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.ItemTags != nil {
		toSerialize["itemTags"] = o.ItemTags
	}
	return json.Marshal(toSerialize)
}

type NullableItem struct {
	value *Item
	isSet bool
}

func (v NullableItem) Get() *Item {
	return v.value
}

func (v *NullableItem) Set(val *Item) {
	v.value = val
	v.isSet = true
}

func (v NullableItem) IsSet() bool {
	return v.isSet
}

func (v *NullableItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItem(val *Item) *NullableItem {
	return &NullableItem{value: val, isSet: true}
}

func (v NullableItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


