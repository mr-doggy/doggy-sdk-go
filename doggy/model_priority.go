/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"fmt"
)

// Priority the model 'Priority'
type Priority string

// List of Priority
const (
	URGENT_IMPORTANT Priority = "UrgentImportant"
	IMPORTANT_NOT_URGENT Priority = "ImportantNotUrgent"
	URGENT_NOT_IMPORTANT Priority = "UrgentNotImportant"
	NOT_IMPORTANT_NOT_URGENT Priority = "NotImportantNotUrgent"
)

// All allowed values of Priority enum
var AllowedPriorityEnumValues = []Priority{
	"UrgentImportant",
	"ImportantNotUrgent",
	"UrgentNotImportant",
	"NotImportantNotUrgent",
}

func (v *Priority) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Priority(value)
	for _, existing := range AllowedPriorityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Priority", value)
}

// NewPriorityFromValue returns a pointer to a valid Priority
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPriorityFromValue(v string) (*Priority, error) {
	ev := Priority(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Priority: valid values are %v", v, AllowedPriorityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Priority) IsValid() bool {
	for _, existing := range AllowedPriorityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Priority value
func (v Priority) Ptr() *Priority {
	return &v
}

type NullablePriority struct {
	value *Priority
	isSet bool
}

func (v NullablePriority) Get() *Priority {
	return v.value
}

func (v *NullablePriority) Set(val *Priority) {
	v.value = val
	v.isSet = true
}

func (v NullablePriority) IsSet() bool {
	return v.isSet
}

func (v *NullablePriority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriority(val *Priority) *NullablePriority {
	return &NullablePriority{value: val, isSet: true}
}

func (v NullablePriority) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

