/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
)

// ItemTag struct for ItemTag
type ItemTag struct {
	ItemId *string `json:"itemId,omitempty"`
	Item *Item `json:"item,omitempty"`
	TagId *string `json:"tagId,omitempty"`
	Tag *Tag `json:"tag,omitempty"`
}

// NewItemTag instantiates a new ItemTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemTag() *ItemTag {
	this := ItemTag{}
	return &this
}

// NewItemTagWithDefaults instantiates a new ItemTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemTagWithDefaults() *ItemTag {
	this := ItemTag{}
	return &this
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *ItemTag) GetItemId() string {
	if o == nil || o.ItemId == nil {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemTag) GetItemIdOk() (*string, bool) {
	if o == nil || o.ItemId == nil {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *ItemTag) HasItemId() bool {
	if o != nil && o.ItemId != nil {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *ItemTag) SetItemId(v string) {
	o.ItemId = &v
}

// GetItem returns the Item field value if set, zero value otherwise.
func (o *ItemTag) GetItem() Item {
	if o == nil || o.Item == nil {
		var ret Item
		return ret
	}
	return *o.Item
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemTag) GetItemOk() (*Item, bool) {
	if o == nil || o.Item == nil {
		return nil, false
	}
	return o.Item, true
}

// HasItem returns a boolean if a field has been set.
func (o *ItemTag) HasItem() bool {
	if o != nil && o.Item != nil {
		return true
	}

	return false
}

// SetItem gets a reference to the given Item and assigns it to the Item field.
func (o *ItemTag) SetItem(v Item) {
	o.Item = &v
}

// GetTagId returns the TagId field value if set, zero value otherwise.
func (o *ItemTag) GetTagId() string {
	if o == nil || o.TagId == nil {
		var ret string
		return ret
	}
	return *o.TagId
}

// GetTagIdOk returns a tuple with the TagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemTag) GetTagIdOk() (*string, bool) {
	if o == nil || o.TagId == nil {
		return nil, false
	}
	return o.TagId, true
}

// HasTagId returns a boolean if a field has been set.
func (o *ItemTag) HasTagId() bool {
	if o != nil && o.TagId != nil {
		return true
	}

	return false
}

// SetTagId gets a reference to the given string and assigns it to the TagId field.
func (o *ItemTag) SetTagId(v string) {
	o.TagId = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *ItemTag) GetTag() Tag {
	if o == nil || o.Tag == nil {
		var ret Tag
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemTag) GetTagOk() (*Tag, bool) {
	if o == nil || o.Tag == nil {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *ItemTag) HasTag() bool {
	if o != nil && o.Tag != nil {
		return true
	}

	return false
}

// SetTag gets a reference to the given Tag and assigns it to the Tag field.
func (o *ItemTag) SetTag(v Tag) {
	o.Tag = &v
}

func (o ItemTag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ItemId != nil {
		toSerialize["itemId"] = o.ItemId
	}
	if o.Item != nil {
		toSerialize["item"] = o.Item
	}
	if o.TagId != nil {
		toSerialize["tagId"] = o.TagId
	}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	return json.Marshal(toSerialize)
}

type NullableItemTag struct {
	value *ItemTag
	isSet bool
}

func (v NullableItemTag) Get() *ItemTag {
	return v.value
}

func (v *NullableItemTag) Set(val *ItemTag) {
	v.value = val
	v.isSet = true
}

func (v NullableItemTag) IsSet() bool {
	return v.isSet
}

func (v *NullableItemTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemTag(val *ItemTag) *NullableItemTag {
	return &NullableItemTag{value: val, isSet: true}
}

func (v NullableItemTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


