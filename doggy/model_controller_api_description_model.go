/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
)

// ControllerApiDescriptionModel struct for ControllerApiDescriptionModel
type ControllerApiDescriptionModel struct {
	ControllerName NullableString `json:"controllerName,omitempty"`
	ControllerGroupName NullableString `json:"controllerGroupName,omitempty"`
	IsRemoteService *bool `json:"isRemoteService,omitempty"`
	ApiVersion NullableString `json:"apiVersion,omitempty"`
	Type NullableString `json:"type,omitempty"`
	Interfaces []ControllerInterfaceApiDescriptionModel `json:"interfaces,omitempty"`
	Actions map[string]ActionApiDescriptionModel `json:"actions,omitempty"`
}

// NewControllerApiDescriptionModel instantiates a new ControllerApiDescriptionModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControllerApiDescriptionModel() *ControllerApiDescriptionModel {
	this := ControllerApiDescriptionModel{}
	return &this
}

// NewControllerApiDescriptionModelWithDefaults instantiates a new ControllerApiDescriptionModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControllerApiDescriptionModelWithDefaults() *ControllerApiDescriptionModel {
	this := ControllerApiDescriptionModel{}
	return &this
}

// GetControllerName returns the ControllerName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ControllerApiDescriptionModel) GetControllerName() string {
	if o == nil || o.ControllerName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ControllerName.Get()
}

// GetControllerNameOk returns a tuple with the ControllerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControllerApiDescriptionModel) GetControllerNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ControllerName.Get(), o.ControllerName.IsSet()
}

// HasControllerName returns a boolean if a field has been set.
func (o *ControllerApiDescriptionModel) HasControllerName() bool {
	if o != nil && o.ControllerName.IsSet() {
		return true
	}

	return false
}

// SetControllerName gets a reference to the given NullableString and assigns it to the ControllerName field.
func (o *ControllerApiDescriptionModel) SetControllerName(v string) {
	o.ControllerName.Set(&v)
}
// SetControllerNameNil sets the value for ControllerName to be an explicit nil
func (o *ControllerApiDescriptionModel) SetControllerNameNil() {
	o.ControllerName.Set(nil)
}

// UnsetControllerName ensures that no value is present for ControllerName, not even an explicit nil
func (o *ControllerApiDescriptionModel) UnsetControllerName() {
	o.ControllerName.Unset()
}

// GetControllerGroupName returns the ControllerGroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ControllerApiDescriptionModel) GetControllerGroupName() string {
	if o == nil || o.ControllerGroupName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ControllerGroupName.Get()
}

// GetControllerGroupNameOk returns a tuple with the ControllerGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControllerApiDescriptionModel) GetControllerGroupNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ControllerGroupName.Get(), o.ControllerGroupName.IsSet()
}

// HasControllerGroupName returns a boolean if a field has been set.
func (o *ControllerApiDescriptionModel) HasControllerGroupName() bool {
	if o != nil && o.ControllerGroupName.IsSet() {
		return true
	}

	return false
}

// SetControllerGroupName gets a reference to the given NullableString and assigns it to the ControllerGroupName field.
func (o *ControllerApiDescriptionModel) SetControllerGroupName(v string) {
	o.ControllerGroupName.Set(&v)
}
// SetControllerGroupNameNil sets the value for ControllerGroupName to be an explicit nil
func (o *ControllerApiDescriptionModel) SetControllerGroupNameNil() {
	o.ControllerGroupName.Set(nil)
}

// UnsetControllerGroupName ensures that no value is present for ControllerGroupName, not even an explicit nil
func (o *ControllerApiDescriptionModel) UnsetControllerGroupName() {
	o.ControllerGroupName.Unset()
}

// GetIsRemoteService returns the IsRemoteService field value if set, zero value otherwise.
func (o *ControllerApiDescriptionModel) GetIsRemoteService() bool {
	if o == nil || o.IsRemoteService == nil {
		var ret bool
		return ret
	}
	return *o.IsRemoteService
}

// GetIsRemoteServiceOk returns a tuple with the IsRemoteService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllerApiDescriptionModel) GetIsRemoteServiceOk() (*bool, bool) {
	if o == nil || o.IsRemoteService == nil {
		return nil, false
	}
	return o.IsRemoteService, true
}

// HasIsRemoteService returns a boolean if a field has been set.
func (o *ControllerApiDescriptionModel) HasIsRemoteService() bool {
	if o != nil && o.IsRemoteService != nil {
		return true
	}

	return false
}

// SetIsRemoteService gets a reference to the given bool and assigns it to the IsRemoteService field.
func (o *ControllerApiDescriptionModel) SetIsRemoteService(v bool) {
	o.IsRemoteService = &v
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ControllerApiDescriptionModel) GetApiVersion() string {
	if o == nil || o.ApiVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion.Get()
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControllerApiDescriptionModel) GetApiVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApiVersion.Get(), o.ApiVersion.IsSet()
}

// HasApiVersion returns a boolean if a field has been set.
func (o *ControllerApiDescriptionModel) HasApiVersion() bool {
	if o != nil && o.ApiVersion.IsSet() {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given NullableString and assigns it to the ApiVersion field.
func (o *ControllerApiDescriptionModel) SetApiVersion(v string) {
	o.ApiVersion.Set(&v)
}
// SetApiVersionNil sets the value for ApiVersion to be an explicit nil
func (o *ControllerApiDescriptionModel) SetApiVersionNil() {
	o.ApiVersion.Set(nil)
}

// UnsetApiVersion ensures that no value is present for ApiVersion, not even an explicit nil
func (o *ControllerApiDescriptionModel) UnsetApiVersion() {
	o.ApiVersion.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ControllerApiDescriptionModel) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControllerApiDescriptionModel) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *ControllerApiDescriptionModel) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *ControllerApiDescriptionModel) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *ControllerApiDescriptionModel) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ControllerApiDescriptionModel) UnsetType() {
	o.Type.Unset()
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ControllerApiDescriptionModel) GetInterfaces() []ControllerInterfaceApiDescriptionModel {
	if o == nil  {
		var ret []ControllerInterfaceApiDescriptionModel
		return ret
	}
	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControllerApiDescriptionModel) GetInterfacesOk() (*[]ControllerInterfaceApiDescriptionModel, bool) {
	if o == nil || o.Interfaces == nil {
		return nil, false
	}
	return &o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *ControllerApiDescriptionModel) HasInterfaces() bool {
	if o != nil && o.Interfaces != nil {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []ControllerInterfaceApiDescriptionModel and assigns it to the Interfaces field.
func (o *ControllerApiDescriptionModel) SetInterfaces(v []ControllerInterfaceApiDescriptionModel) {
	o.Interfaces = v
}

// GetActions returns the Actions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ControllerApiDescriptionModel) GetActions() map[string]ActionApiDescriptionModel {
	if o == nil  {
		var ret map[string]ActionApiDescriptionModel
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ControllerApiDescriptionModel) GetActionsOk() (*map[string]ActionApiDescriptionModel, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return &o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *ControllerApiDescriptionModel) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given map[string]ActionApiDescriptionModel and assigns it to the Actions field.
func (o *ControllerApiDescriptionModel) SetActions(v map[string]ActionApiDescriptionModel) {
	o.Actions = v
}

func (o ControllerApiDescriptionModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ControllerName.IsSet() {
		toSerialize["controllerName"] = o.ControllerName.Get()
	}
	if o.ControllerGroupName.IsSet() {
		toSerialize["controllerGroupName"] = o.ControllerGroupName.Get()
	}
	if o.IsRemoteService != nil {
		toSerialize["isRemoteService"] = o.IsRemoteService
	}
	if o.ApiVersion.IsSet() {
		toSerialize["apiVersion"] = o.ApiVersion.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Interfaces != nil {
		toSerialize["interfaces"] = o.Interfaces
	}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	return json.Marshal(toSerialize)
}

type NullableControllerApiDescriptionModel struct {
	value *ControllerApiDescriptionModel
	isSet bool
}

func (v NullableControllerApiDescriptionModel) Get() *ControllerApiDescriptionModel {
	return v.value
}

func (v *NullableControllerApiDescriptionModel) Set(val *ControllerApiDescriptionModel) {
	v.value = val
	v.isSet = true
}

func (v NullableControllerApiDescriptionModel) IsSet() bool {
	return v.isSet
}

func (v *NullableControllerApiDescriptionModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControllerApiDescriptionModel(val *ControllerApiDescriptionModel) *NullableControllerApiDescriptionModel {
	return &NullableControllerApiDescriptionModel{value: val, isSet: true}
}

func (v NullableControllerApiDescriptionModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControllerApiDescriptionModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


