/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"time"
)

// MemberDto struct for MemberDto
type MemberDto struct {
	ExpiredAt NullableTime `json:"expiredAt,omitempty"`
	TodoExpiredAt NullableTime `json:"todoExpiredAt,omitempty"`
	NoteExpiredAt NullableTime `json:"noteExpiredAt,omitempty"`
	AlbumExpiredAt NullableTime `json:"albumExpiredAt,omitempty"`
	FileExpiredAt NullableTime `json:"fileExpiredAt,omitempty"`
	Level NullableString `json:"level,omitempty"`
	TodoLevel NullableString `json:"todoLevel,omitempty"`
	NoteLevel NullableString `json:"noteLevel,omitempty"`
	AlbumLevel NullableString `json:"albumLevel,omitempty"`
	FileLevel NullableString `json:"fileLevel,omitempty"`
}

// NewMemberDto instantiates a new MemberDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberDto() *MemberDto {
	this := MemberDto{}
	return &this
}

// NewMemberDtoWithDefaults instantiates a new MemberDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberDtoWithDefaults() *MemberDto {
	this := MemberDto{}
	return &this
}

// GetExpiredAt returns the ExpiredAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberDto) GetExpiredAt() time.Time {
	if o == nil || o.ExpiredAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiredAt.Get()
}

// GetExpiredAtOk returns a tuple with the ExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberDto) GetExpiredAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiredAt.Get(), o.ExpiredAt.IsSet()
}

// HasExpiredAt returns a boolean if a field has been set.
func (o *MemberDto) HasExpiredAt() bool {
	if o != nil && o.ExpiredAt.IsSet() {
		return true
	}

	return false
}

// SetExpiredAt gets a reference to the given NullableTime and assigns it to the ExpiredAt field.
func (o *MemberDto) SetExpiredAt(v time.Time) {
	o.ExpiredAt.Set(&v)
}
// SetExpiredAtNil sets the value for ExpiredAt to be an explicit nil
func (o *MemberDto) SetExpiredAtNil() {
	o.ExpiredAt.Set(nil)
}

// UnsetExpiredAt ensures that no value is present for ExpiredAt, not even an explicit nil
func (o *MemberDto) UnsetExpiredAt() {
	o.ExpiredAt.Unset()
}

// GetTodoExpiredAt returns the TodoExpiredAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberDto) GetTodoExpiredAt() time.Time {
	if o == nil || o.TodoExpiredAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.TodoExpiredAt.Get()
}

// GetTodoExpiredAtOk returns a tuple with the TodoExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberDto) GetTodoExpiredAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TodoExpiredAt.Get(), o.TodoExpiredAt.IsSet()
}

// HasTodoExpiredAt returns a boolean if a field has been set.
func (o *MemberDto) HasTodoExpiredAt() bool {
	if o != nil && o.TodoExpiredAt.IsSet() {
		return true
	}

	return false
}

// SetTodoExpiredAt gets a reference to the given NullableTime and assigns it to the TodoExpiredAt field.
func (o *MemberDto) SetTodoExpiredAt(v time.Time) {
	o.TodoExpiredAt.Set(&v)
}
// SetTodoExpiredAtNil sets the value for TodoExpiredAt to be an explicit nil
func (o *MemberDto) SetTodoExpiredAtNil() {
	o.TodoExpiredAt.Set(nil)
}

// UnsetTodoExpiredAt ensures that no value is present for TodoExpiredAt, not even an explicit nil
func (o *MemberDto) UnsetTodoExpiredAt() {
	o.TodoExpiredAt.Unset()
}

// GetNoteExpiredAt returns the NoteExpiredAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberDto) GetNoteExpiredAt() time.Time {
	if o == nil || o.NoteExpiredAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.NoteExpiredAt.Get()
}

// GetNoteExpiredAtOk returns a tuple with the NoteExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberDto) GetNoteExpiredAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NoteExpiredAt.Get(), o.NoteExpiredAt.IsSet()
}

// HasNoteExpiredAt returns a boolean if a field has been set.
func (o *MemberDto) HasNoteExpiredAt() bool {
	if o != nil && o.NoteExpiredAt.IsSet() {
		return true
	}

	return false
}

// SetNoteExpiredAt gets a reference to the given NullableTime and assigns it to the NoteExpiredAt field.
func (o *MemberDto) SetNoteExpiredAt(v time.Time) {
	o.NoteExpiredAt.Set(&v)
}
// SetNoteExpiredAtNil sets the value for NoteExpiredAt to be an explicit nil
func (o *MemberDto) SetNoteExpiredAtNil() {
	o.NoteExpiredAt.Set(nil)
}

// UnsetNoteExpiredAt ensures that no value is present for NoteExpiredAt, not even an explicit nil
func (o *MemberDto) UnsetNoteExpiredAt() {
	o.NoteExpiredAt.Unset()
}

// GetAlbumExpiredAt returns the AlbumExpiredAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberDto) GetAlbumExpiredAt() time.Time {
	if o == nil || o.AlbumExpiredAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.AlbumExpiredAt.Get()
}

// GetAlbumExpiredAtOk returns a tuple with the AlbumExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberDto) GetAlbumExpiredAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlbumExpiredAt.Get(), o.AlbumExpiredAt.IsSet()
}

// HasAlbumExpiredAt returns a boolean if a field has been set.
func (o *MemberDto) HasAlbumExpiredAt() bool {
	if o != nil && o.AlbumExpiredAt.IsSet() {
		return true
	}

	return false
}

// SetAlbumExpiredAt gets a reference to the given NullableTime and assigns it to the AlbumExpiredAt field.
func (o *MemberDto) SetAlbumExpiredAt(v time.Time) {
	o.AlbumExpiredAt.Set(&v)
}
// SetAlbumExpiredAtNil sets the value for AlbumExpiredAt to be an explicit nil
func (o *MemberDto) SetAlbumExpiredAtNil() {
	o.AlbumExpiredAt.Set(nil)
}

// UnsetAlbumExpiredAt ensures that no value is present for AlbumExpiredAt, not even an explicit nil
func (o *MemberDto) UnsetAlbumExpiredAt() {
	o.AlbumExpiredAt.Unset()
}

// GetFileExpiredAt returns the FileExpiredAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberDto) GetFileExpiredAt() time.Time {
	if o == nil || o.FileExpiredAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.FileExpiredAt.Get()
}

// GetFileExpiredAtOk returns a tuple with the FileExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberDto) GetFileExpiredAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileExpiredAt.Get(), o.FileExpiredAt.IsSet()
}

// HasFileExpiredAt returns a boolean if a field has been set.
func (o *MemberDto) HasFileExpiredAt() bool {
	if o != nil && o.FileExpiredAt.IsSet() {
		return true
	}

	return false
}

// SetFileExpiredAt gets a reference to the given NullableTime and assigns it to the FileExpiredAt field.
func (o *MemberDto) SetFileExpiredAt(v time.Time) {
	o.FileExpiredAt.Set(&v)
}
// SetFileExpiredAtNil sets the value for FileExpiredAt to be an explicit nil
func (o *MemberDto) SetFileExpiredAtNil() {
	o.FileExpiredAt.Set(nil)
}

// UnsetFileExpiredAt ensures that no value is present for FileExpiredAt, not even an explicit nil
func (o *MemberDto) UnsetFileExpiredAt() {
	o.FileExpiredAt.Unset()
}

// GetLevel returns the Level field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberDto) GetLevel() string {
	if o == nil || o.Level.Get() == nil {
		var ret string
		return ret
	}
	return *o.Level.Get()
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberDto) GetLevelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Level.Get(), o.Level.IsSet()
}

// HasLevel returns a boolean if a field has been set.
func (o *MemberDto) HasLevel() bool {
	if o != nil && o.Level.IsSet() {
		return true
	}

	return false
}

// SetLevel gets a reference to the given NullableString and assigns it to the Level field.
func (o *MemberDto) SetLevel(v string) {
	o.Level.Set(&v)
}
// SetLevelNil sets the value for Level to be an explicit nil
func (o *MemberDto) SetLevelNil() {
	o.Level.Set(nil)
}

// UnsetLevel ensures that no value is present for Level, not even an explicit nil
func (o *MemberDto) UnsetLevel() {
	o.Level.Unset()
}

// GetTodoLevel returns the TodoLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberDto) GetTodoLevel() string {
	if o == nil || o.TodoLevel.Get() == nil {
		var ret string
		return ret
	}
	return *o.TodoLevel.Get()
}

// GetTodoLevelOk returns a tuple with the TodoLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberDto) GetTodoLevelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TodoLevel.Get(), o.TodoLevel.IsSet()
}

// HasTodoLevel returns a boolean if a field has been set.
func (o *MemberDto) HasTodoLevel() bool {
	if o != nil && o.TodoLevel.IsSet() {
		return true
	}

	return false
}

// SetTodoLevel gets a reference to the given NullableString and assigns it to the TodoLevel field.
func (o *MemberDto) SetTodoLevel(v string) {
	o.TodoLevel.Set(&v)
}
// SetTodoLevelNil sets the value for TodoLevel to be an explicit nil
func (o *MemberDto) SetTodoLevelNil() {
	o.TodoLevel.Set(nil)
}

// UnsetTodoLevel ensures that no value is present for TodoLevel, not even an explicit nil
func (o *MemberDto) UnsetTodoLevel() {
	o.TodoLevel.Unset()
}

// GetNoteLevel returns the NoteLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberDto) GetNoteLevel() string {
	if o == nil || o.NoteLevel.Get() == nil {
		var ret string
		return ret
	}
	return *o.NoteLevel.Get()
}

// GetNoteLevelOk returns a tuple with the NoteLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberDto) GetNoteLevelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NoteLevel.Get(), o.NoteLevel.IsSet()
}

// HasNoteLevel returns a boolean if a field has been set.
func (o *MemberDto) HasNoteLevel() bool {
	if o != nil && o.NoteLevel.IsSet() {
		return true
	}

	return false
}

// SetNoteLevel gets a reference to the given NullableString and assigns it to the NoteLevel field.
func (o *MemberDto) SetNoteLevel(v string) {
	o.NoteLevel.Set(&v)
}
// SetNoteLevelNil sets the value for NoteLevel to be an explicit nil
func (o *MemberDto) SetNoteLevelNil() {
	o.NoteLevel.Set(nil)
}

// UnsetNoteLevel ensures that no value is present for NoteLevel, not even an explicit nil
func (o *MemberDto) UnsetNoteLevel() {
	o.NoteLevel.Unset()
}

// GetAlbumLevel returns the AlbumLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberDto) GetAlbumLevel() string {
	if o == nil || o.AlbumLevel.Get() == nil {
		var ret string
		return ret
	}
	return *o.AlbumLevel.Get()
}

// GetAlbumLevelOk returns a tuple with the AlbumLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberDto) GetAlbumLevelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlbumLevel.Get(), o.AlbumLevel.IsSet()
}

// HasAlbumLevel returns a boolean if a field has been set.
func (o *MemberDto) HasAlbumLevel() bool {
	if o != nil && o.AlbumLevel.IsSet() {
		return true
	}

	return false
}

// SetAlbumLevel gets a reference to the given NullableString and assigns it to the AlbumLevel field.
func (o *MemberDto) SetAlbumLevel(v string) {
	o.AlbumLevel.Set(&v)
}
// SetAlbumLevelNil sets the value for AlbumLevel to be an explicit nil
func (o *MemberDto) SetAlbumLevelNil() {
	o.AlbumLevel.Set(nil)
}

// UnsetAlbumLevel ensures that no value is present for AlbumLevel, not even an explicit nil
func (o *MemberDto) UnsetAlbumLevel() {
	o.AlbumLevel.Unset()
}

// GetFileLevel returns the FileLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberDto) GetFileLevel() string {
	if o == nil || o.FileLevel.Get() == nil {
		var ret string
		return ret
	}
	return *o.FileLevel.Get()
}

// GetFileLevelOk returns a tuple with the FileLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberDto) GetFileLevelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileLevel.Get(), o.FileLevel.IsSet()
}

// HasFileLevel returns a boolean if a field has been set.
func (o *MemberDto) HasFileLevel() bool {
	if o != nil && o.FileLevel.IsSet() {
		return true
	}

	return false
}

// SetFileLevel gets a reference to the given NullableString and assigns it to the FileLevel field.
func (o *MemberDto) SetFileLevel(v string) {
	o.FileLevel.Set(&v)
}
// SetFileLevelNil sets the value for FileLevel to be an explicit nil
func (o *MemberDto) SetFileLevelNil() {
	o.FileLevel.Set(nil)
}

// UnsetFileLevel ensures that no value is present for FileLevel, not even an explicit nil
func (o *MemberDto) UnsetFileLevel() {
	o.FileLevel.Unset()
}

func (o MemberDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpiredAt.IsSet() {
		toSerialize["expiredAt"] = o.ExpiredAt.Get()
	}
	if o.TodoExpiredAt.IsSet() {
		toSerialize["todoExpiredAt"] = o.TodoExpiredAt.Get()
	}
	if o.NoteExpiredAt.IsSet() {
		toSerialize["noteExpiredAt"] = o.NoteExpiredAt.Get()
	}
	if o.AlbumExpiredAt.IsSet() {
		toSerialize["albumExpiredAt"] = o.AlbumExpiredAt.Get()
	}
	if o.FileExpiredAt.IsSet() {
		toSerialize["fileExpiredAt"] = o.FileExpiredAt.Get()
	}
	if o.Level.IsSet() {
		toSerialize["level"] = o.Level.Get()
	}
	if o.TodoLevel.IsSet() {
		toSerialize["todoLevel"] = o.TodoLevel.Get()
	}
	if o.NoteLevel.IsSet() {
		toSerialize["noteLevel"] = o.NoteLevel.Get()
	}
	if o.AlbumLevel.IsSet() {
		toSerialize["albumLevel"] = o.AlbumLevel.Get()
	}
	if o.FileLevel.IsSet() {
		toSerialize["fileLevel"] = o.FileLevel.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMemberDto struct {
	value *MemberDto
	isSet bool
}

func (v NullableMemberDto) Get() *MemberDto {
	return v.value
}

func (v *NullableMemberDto) Set(val *MemberDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberDto(val *MemberDto) *NullableMemberDto {
	return &NullableMemberDto{value: val, isSet: true}
}

func (v NullableMemberDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


