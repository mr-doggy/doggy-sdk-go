/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"time"
)

// MemberDto struct for MemberDto
type MemberDto struct {
	ExpiredAt NullableTime `json:"expiredAt,omitempty"`
	Level *MemberLevel `json:"level,omitempty"`
}

// NewMemberDto instantiates a new MemberDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberDto() *MemberDto {
	this := MemberDto{}
	return &this
}

// NewMemberDtoWithDefaults instantiates a new MemberDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberDtoWithDefaults() *MemberDto {
	this := MemberDto{}
	return &this
}

// GetExpiredAt returns the ExpiredAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MemberDto) GetExpiredAt() time.Time {
	if o == nil || o.ExpiredAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiredAt.Get()
}

// GetExpiredAtOk returns a tuple with the ExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MemberDto) GetExpiredAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiredAt.Get(), o.ExpiredAt.IsSet()
}

// HasExpiredAt returns a boolean if a field has been set.
func (o *MemberDto) HasExpiredAt() bool {
	if o != nil && o.ExpiredAt.IsSet() {
		return true
	}

	return false
}

// SetExpiredAt gets a reference to the given NullableTime and assigns it to the ExpiredAt field.
func (o *MemberDto) SetExpiredAt(v time.Time) {
	o.ExpiredAt.Set(&v)
}
// SetExpiredAtNil sets the value for ExpiredAt to be an explicit nil
func (o *MemberDto) SetExpiredAtNil() {
	o.ExpiredAt.Set(nil)
}

// UnsetExpiredAt ensures that no value is present for ExpiredAt, not even an explicit nil
func (o *MemberDto) UnsetExpiredAt() {
	o.ExpiredAt.Unset()
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *MemberDto) GetLevel() MemberLevel {
	if o == nil || o.Level == nil {
		var ret MemberLevel
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberDto) GetLevelOk() (*MemberLevel, bool) {
	if o == nil || o.Level == nil {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *MemberDto) HasLevel() bool {
	if o != nil && o.Level != nil {
		return true
	}

	return false
}

// SetLevel gets a reference to the given MemberLevel and assigns it to the Level field.
func (o *MemberDto) SetLevel(v MemberLevel) {
	o.Level = &v
}

func (o MemberDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpiredAt.IsSet() {
		toSerialize["expiredAt"] = o.ExpiredAt.Get()
	}
	if o.Level != nil {
		toSerialize["level"] = o.Level
	}
	return json.Marshal(toSerialize)
}

type NullableMemberDto struct {
	value *MemberDto
	isSet bool
}

func (v NullableMemberDto) Get() *MemberDto {
	return v.value
}

func (v *NullableMemberDto) Set(val *MemberDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberDto(val *MemberDto) *NullableMemberDto {
	return &NullableMemberDto{value: val, isSet: true}
}

func (v NullableMemberDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


