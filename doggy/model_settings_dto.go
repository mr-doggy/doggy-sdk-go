/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
)

// SettingsDto struct for SettingsDto
type SettingsDto struct {
	AppThemes *AppThemePlatformSettings `json:"appThemes,omitempty"`
}

// NewSettingsDto instantiates a new SettingsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsDto() *SettingsDto {
	this := SettingsDto{}
	return &this
}

// NewSettingsDtoWithDefaults instantiates a new SettingsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsDtoWithDefaults() *SettingsDto {
	this := SettingsDto{}
	return &this
}

// GetAppThemes returns the AppThemes field value if set, zero value otherwise.
func (o *SettingsDto) GetAppThemes() AppThemePlatformSettings {
	if o == nil || o.AppThemes == nil {
		var ret AppThemePlatformSettings
		return ret
	}
	return *o.AppThemes
}

// GetAppThemesOk returns a tuple with the AppThemes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsDto) GetAppThemesOk() (*AppThemePlatformSettings, bool) {
	if o == nil || o.AppThemes == nil {
		return nil, false
	}
	return o.AppThemes, true
}

// HasAppThemes returns a boolean if a field has been set.
func (o *SettingsDto) HasAppThemes() bool {
	if o != nil && o.AppThemes != nil {
		return true
	}

	return false
}

// SetAppThemes gets a reference to the given AppThemePlatformSettings and assigns it to the AppThemes field.
func (o *SettingsDto) SetAppThemes(v AppThemePlatformSettings) {
	o.AppThemes = &v
}

func (o SettingsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppThemes != nil {
		toSerialize["appThemes"] = o.AppThemes
	}
	return json.Marshal(toSerialize)
}

type NullableSettingsDto struct {
	value *SettingsDto
	isSet bool
}

func (v NullableSettingsDto) Get() *SettingsDto {
	return v.value
}

func (v *NullableSettingsDto) Set(val *SettingsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsDto(val *SettingsDto) *NullableSettingsDto {
	return &NullableSettingsDto{value: val, isSet: true}
}

func (v NullableSettingsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


