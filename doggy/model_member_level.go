/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"fmt"
)

// MemberLevel the model 'MemberLevel'
type MemberLevel string

// List of MemberLevel
const (
	NONE MemberLevel = "None"
	MONTHLY MemberLevel = "Monthly"
	QUARTERLY MemberLevel = "Quarterly"
	ANNUAL MemberLevel = "Annual"
	UNLIMITED MemberLevel = "Unlimited"
)

// All allowed values of MemberLevel enum
var AllowedMemberLevelEnumValues = []MemberLevel{
	"None",
	"Monthly",
	"Quarterly",
	"Annual",
	"Unlimited",
}

func (v *MemberLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MemberLevel(value)
	for _, existing := range AllowedMemberLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MemberLevel", value)
}

// NewMemberLevelFromValue returns a pointer to a valid MemberLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMemberLevelFromValue(v string) (*MemberLevel, error) {
	ev := MemberLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MemberLevel: valid values are %v", v, AllowedMemberLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MemberLevel) IsValid() bool {
	for _, existing := range AllowedMemberLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MemberLevel value
func (v MemberLevel) Ptr() *MemberLevel {
	return &v
}

type NullableMemberLevel struct {
	value *MemberLevel
	isSet bool
}

func (v NullableMemberLevel) Get() *MemberLevel {
	return v.value
}

func (v *NullableMemberLevel) Set(val *MemberLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberLevel(val *MemberLevel) *NullableMemberLevel {
	return &NullableMemberLevel{value: val, isSet: true}
}

func (v NullableMemberLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

