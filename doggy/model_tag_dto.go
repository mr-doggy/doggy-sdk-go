/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"time"
)

// TagDto struct for TagDto
type TagDto struct {
	Id *string `json:"id,omitempty"`
	CreationTime *time.Time `json:"creationTime,omitempty"`
	CreatorId NullableString `json:"creatorId,omitempty"`
	LastModificationTime NullableTime `json:"lastModificationTime,omitempty"`
	LastModifierId NullableString `json:"lastModifierId,omitempty"`
	IsDeleted *bool `json:"isDeleted,omitempty"`
	DeleterId NullableString `json:"deleterId,omitempty"`
	DeletionTime NullableTime `json:"deletionTime,omitempty"`
	Name NullableString `json:"name,omitempty"`
	RefCount *int32 `json:"refCount,omitempty"`
	ParentTagId NullableString `json:"parentTagId,omitempty"`
	ParentTag *TagDto `json:"parentTag,omitempty"`
	Children []TagDto `json:"children,omitempty"`
	FullPath NullableString `json:"fullPath,omitempty"`
	SyncVersion *int64 `json:"syncVersion,omitempty"`
}

// NewTagDto instantiates a new TagDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagDto() *TagDto {
	this := TagDto{}
	return &this
}

// NewTagDtoWithDefaults instantiates a new TagDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagDtoWithDefaults() *TagDto {
	this := TagDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TagDto) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagDto) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TagDto) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TagDto) SetId(v string) {
	o.Id = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *TagDto) GetCreationTime() time.Time {
	if o == nil || o.CreationTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagDto) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || o.CreationTime == nil {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *TagDto) HasCreationTime() bool {
	if o != nil && o.CreationTime != nil {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *TagDto) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagDto) GetCreatorId() string {
	if o == nil || o.CreatorId.Get() == nil {
		var ret string
		return ret
	}
	return *o.CreatorId.Get()
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagDto) GetCreatorIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatorId.Get(), o.CreatorId.IsSet()
}

// HasCreatorId returns a boolean if a field has been set.
func (o *TagDto) HasCreatorId() bool {
	if o != nil && o.CreatorId.IsSet() {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given NullableString and assigns it to the CreatorId field.
func (o *TagDto) SetCreatorId(v string) {
	o.CreatorId.Set(&v)
}
// SetCreatorIdNil sets the value for CreatorId to be an explicit nil
func (o *TagDto) SetCreatorIdNil() {
	o.CreatorId.Set(nil)
}

// UnsetCreatorId ensures that no value is present for CreatorId, not even an explicit nil
func (o *TagDto) UnsetCreatorId() {
	o.CreatorId.Unset()
}

// GetLastModificationTime returns the LastModificationTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagDto) GetLastModificationTime() time.Time {
	if o == nil || o.LastModificationTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LastModificationTime.Get()
}

// GetLastModificationTimeOk returns a tuple with the LastModificationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagDto) GetLastModificationTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastModificationTime.Get(), o.LastModificationTime.IsSet()
}

// HasLastModificationTime returns a boolean if a field has been set.
func (o *TagDto) HasLastModificationTime() bool {
	if o != nil && o.LastModificationTime.IsSet() {
		return true
	}

	return false
}

// SetLastModificationTime gets a reference to the given NullableTime and assigns it to the LastModificationTime field.
func (o *TagDto) SetLastModificationTime(v time.Time) {
	o.LastModificationTime.Set(&v)
}
// SetLastModificationTimeNil sets the value for LastModificationTime to be an explicit nil
func (o *TagDto) SetLastModificationTimeNil() {
	o.LastModificationTime.Set(nil)
}

// UnsetLastModificationTime ensures that no value is present for LastModificationTime, not even an explicit nil
func (o *TagDto) UnsetLastModificationTime() {
	o.LastModificationTime.Unset()
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagDto) GetLastModifierId() string {
	if o == nil || o.LastModifierId.Get() == nil {
		var ret string
		return ret
	}
	return *o.LastModifierId.Get()
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagDto) GetLastModifierIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastModifierId.Get(), o.LastModifierId.IsSet()
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *TagDto) HasLastModifierId() bool {
	if o != nil && o.LastModifierId.IsSet() {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given NullableString and assigns it to the LastModifierId field.
func (o *TagDto) SetLastModifierId(v string) {
	o.LastModifierId.Set(&v)
}
// SetLastModifierIdNil sets the value for LastModifierId to be an explicit nil
func (o *TagDto) SetLastModifierIdNil() {
	o.LastModifierId.Set(nil)
}

// UnsetLastModifierId ensures that no value is present for LastModifierId, not even an explicit nil
func (o *TagDto) UnsetLastModifierId() {
	o.LastModifierId.Unset()
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *TagDto) GetIsDeleted() bool {
	if o == nil || o.IsDeleted == nil {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagDto) GetIsDeletedOk() (*bool, bool) {
	if o == nil || o.IsDeleted == nil {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *TagDto) HasIsDeleted() bool {
	if o != nil && o.IsDeleted != nil {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *TagDto) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetDeleterId returns the DeleterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagDto) GetDeleterId() string {
	if o == nil || o.DeleterId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DeleterId.Get()
}

// GetDeleterIdOk returns a tuple with the DeleterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagDto) GetDeleterIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeleterId.Get(), o.DeleterId.IsSet()
}

// HasDeleterId returns a boolean if a field has been set.
func (o *TagDto) HasDeleterId() bool {
	if o != nil && o.DeleterId.IsSet() {
		return true
	}

	return false
}

// SetDeleterId gets a reference to the given NullableString and assigns it to the DeleterId field.
func (o *TagDto) SetDeleterId(v string) {
	o.DeleterId.Set(&v)
}
// SetDeleterIdNil sets the value for DeleterId to be an explicit nil
func (o *TagDto) SetDeleterIdNil() {
	o.DeleterId.Set(nil)
}

// UnsetDeleterId ensures that no value is present for DeleterId, not even an explicit nil
func (o *TagDto) UnsetDeleterId() {
	o.DeleterId.Unset()
}

// GetDeletionTime returns the DeletionTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagDto) GetDeletionTime() time.Time {
	if o == nil || o.DeletionTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.DeletionTime.Get()
}

// GetDeletionTimeOk returns a tuple with the DeletionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagDto) GetDeletionTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeletionTime.Get(), o.DeletionTime.IsSet()
}

// HasDeletionTime returns a boolean if a field has been set.
func (o *TagDto) HasDeletionTime() bool {
	if o != nil && o.DeletionTime.IsSet() {
		return true
	}

	return false
}

// SetDeletionTime gets a reference to the given NullableTime and assigns it to the DeletionTime field.
func (o *TagDto) SetDeletionTime(v time.Time) {
	o.DeletionTime.Set(&v)
}
// SetDeletionTimeNil sets the value for DeletionTime to be an explicit nil
func (o *TagDto) SetDeletionTimeNil() {
	o.DeletionTime.Set(nil)
}

// UnsetDeletionTime ensures that no value is present for DeletionTime, not even an explicit nil
func (o *TagDto) UnsetDeletionTime() {
	o.DeletionTime.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagDto) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagDto) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TagDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *TagDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TagDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TagDto) UnsetName() {
	o.Name.Unset()
}

// GetRefCount returns the RefCount field value if set, zero value otherwise.
func (o *TagDto) GetRefCount() int32 {
	if o == nil || o.RefCount == nil {
		var ret int32
		return ret
	}
	return *o.RefCount
}

// GetRefCountOk returns a tuple with the RefCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagDto) GetRefCountOk() (*int32, bool) {
	if o == nil || o.RefCount == nil {
		return nil, false
	}
	return o.RefCount, true
}

// HasRefCount returns a boolean if a field has been set.
func (o *TagDto) HasRefCount() bool {
	if o != nil && o.RefCount != nil {
		return true
	}

	return false
}

// SetRefCount gets a reference to the given int32 and assigns it to the RefCount field.
func (o *TagDto) SetRefCount(v int32) {
	o.RefCount = &v
}

// GetParentTagId returns the ParentTagId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagDto) GetParentTagId() string {
	if o == nil || o.ParentTagId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ParentTagId.Get()
}

// GetParentTagIdOk returns a tuple with the ParentTagId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagDto) GetParentTagIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentTagId.Get(), o.ParentTagId.IsSet()
}

// HasParentTagId returns a boolean if a field has been set.
func (o *TagDto) HasParentTagId() bool {
	if o != nil && o.ParentTagId.IsSet() {
		return true
	}

	return false
}

// SetParentTagId gets a reference to the given NullableString and assigns it to the ParentTagId field.
func (o *TagDto) SetParentTagId(v string) {
	o.ParentTagId.Set(&v)
}
// SetParentTagIdNil sets the value for ParentTagId to be an explicit nil
func (o *TagDto) SetParentTagIdNil() {
	o.ParentTagId.Set(nil)
}

// UnsetParentTagId ensures that no value is present for ParentTagId, not even an explicit nil
func (o *TagDto) UnsetParentTagId() {
	o.ParentTagId.Unset()
}

// GetParentTag returns the ParentTag field value if set, zero value otherwise.
func (o *TagDto) GetParentTag() TagDto {
	if o == nil || o.ParentTag == nil {
		var ret TagDto
		return ret
	}
	return *o.ParentTag
}

// GetParentTagOk returns a tuple with the ParentTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagDto) GetParentTagOk() (*TagDto, bool) {
	if o == nil || o.ParentTag == nil {
		return nil, false
	}
	return o.ParentTag, true
}

// HasParentTag returns a boolean if a field has been set.
func (o *TagDto) HasParentTag() bool {
	if o != nil && o.ParentTag != nil {
		return true
	}

	return false
}

// SetParentTag gets a reference to the given TagDto and assigns it to the ParentTag field.
func (o *TagDto) SetParentTag(v TagDto) {
	o.ParentTag = &v
}

// GetChildren returns the Children field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagDto) GetChildren() []TagDto {
	if o == nil  {
		var ret []TagDto
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagDto) GetChildrenOk() (*[]TagDto, bool) {
	if o == nil || o.Children == nil {
		return nil, false
	}
	return &o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *TagDto) HasChildren() bool {
	if o != nil && o.Children != nil {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []TagDto and assigns it to the Children field.
func (o *TagDto) SetChildren(v []TagDto) {
	o.Children = v
}

// GetFullPath returns the FullPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagDto) GetFullPath() string {
	if o == nil || o.FullPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.FullPath.Get()
}

// GetFullPathOk returns a tuple with the FullPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagDto) GetFullPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FullPath.Get(), o.FullPath.IsSet()
}

// HasFullPath returns a boolean if a field has been set.
func (o *TagDto) HasFullPath() bool {
	if o != nil && o.FullPath.IsSet() {
		return true
	}

	return false
}

// SetFullPath gets a reference to the given NullableString and assigns it to the FullPath field.
func (o *TagDto) SetFullPath(v string) {
	o.FullPath.Set(&v)
}
// SetFullPathNil sets the value for FullPath to be an explicit nil
func (o *TagDto) SetFullPathNil() {
	o.FullPath.Set(nil)
}

// UnsetFullPath ensures that no value is present for FullPath, not even an explicit nil
func (o *TagDto) UnsetFullPath() {
	o.FullPath.Unset()
}

// GetSyncVersion returns the SyncVersion field value if set, zero value otherwise.
func (o *TagDto) GetSyncVersion() int64 {
	if o == nil || o.SyncVersion == nil {
		var ret int64
		return ret
	}
	return *o.SyncVersion
}

// GetSyncVersionOk returns a tuple with the SyncVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagDto) GetSyncVersionOk() (*int64, bool) {
	if o == nil || o.SyncVersion == nil {
		return nil, false
	}
	return o.SyncVersion, true
}

// HasSyncVersion returns a boolean if a field has been set.
func (o *TagDto) HasSyncVersion() bool {
	if o != nil && o.SyncVersion != nil {
		return true
	}

	return false
}

// SetSyncVersion gets a reference to the given int64 and assigns it to the SyncVersion field.
func (o *TagDto) SetSyncVersion(v int64) {
	o.SyncVersion = &v
}

func (o TagDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CreationTime != nil {
		toSerialize["creationTime"] = o.CreationTime
	}
	if o.CreatorId.IsSet() {
		toSerialize["creatorId"] = o.CreatorId.Get()
	}
	if o.LastModificationTime.IsSet() {
		toSerialize["lastModificationTime"] = o.LastModificationTime.Get()
	}
	if o.LastModifierId.IsSet() {
		toSerialize["lastModifierId"] = o.LastModifierId.Get()
	}
	if o.IsDeleted != nil {
		toSerialize["isDeleted"] = o.IsDeleted
	}
	if o.DeleterId.IsSet() {
		toSerialize["deleterId"] = o.DeleterId.Get()
	}
	if o.DeletionTime.IsSet() {
		toSerialize["deletionTime"] = o.DeletionTime.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.RefCount != nil {
		toSerialize["refCount"] = o.RefCount
	}
	if o.ParentTagId.IsSet() {
		toSerialize["parentTagId"] = o.ParentTagId.Get()
	}
	if o.ParentTag != nil {
		toSerialize["parentTag"] = o.ParentTag
	}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}
	if o.FullPath.IsSet() {
		toSerialize["fullPath"] = o.FullPath.Get()
	}
	if o.SyncVersion != nil {
		toSerialize["syncVersion"] = o.SyncVersion
	}
	return json.Marshal(toSerialize)
}

type NullableTagDto struct {
	value *TagDto
	isSet bool
}

func (v NullableTagDto) Get() *TagDto {
	return v.value
}

func (v *NullableTagDto) Set(val *TagDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTagDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTagDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagDto(val *TagDto) *NullableTagDto {
	return &NullableTagDto{value: val, isSet: true}
}

func (v NullableTagDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


