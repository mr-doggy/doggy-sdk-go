/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"fmt"
)

// SpecialItems the model 'SpecialItems'
type SpecialItems string

// List of SpecialItems
const (
	NOTE_FOLDER SpecialItems = "NoteFolder"
	ALBUM_FOLDER SpecialItems = "AlbumFolder"
	MEDIA_FOLDER SpecialItems = "MediaFolder"
	MUSIC_FOLDER SpecialItems = "MusicFolder"
	DOCUMENT_FOLDER SpecialItems = "DocumentFolder"
)

// All allowed values of SpecialItems enum
var AllowedSpecialItemsEnumValues = []SpecialItems{
	"NoteFolder",
	"AlbumFolder",
	"MediaFolder",
	"MusicFolder",
	"DocumentFolder",
}

func (v *SpecialItems) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SpecialItems(value)
	for _, existing := range AllowedSpecialItemsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SpecialItems", value)
}

// NewSpecialItemsFromValue returns a pointer to a valid SpecialItems
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSpecialItemsFromValue(v string) (*SpecialItems, error) {
	ev := SpecialItems(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SpecialItems: valid values are %v", v, AllowedSpecialItemsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SpecialItems) IsValid() bool {
	for _, existing := range AllowedSpecialItemsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SpecialItems value
func (v SpecialItems) Ptr() *SpecialItems {
	return &v
}

type NullableSpecialItems struct {
	value *SpecialItems
	isSet bool
}

func (v NullableSpecialItems) Get() *SpecialItems {
	return v.value
}

func (v *NullableSpecialItems) Set(val *SpecialItems) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecialItems) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecialItems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecialItems(val *SpecialItems) *NullableSpecialItems {
	return &NullableSpecialItems{value: val, isSet: true}
}

func (v NullableSpecialItems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecialItems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

