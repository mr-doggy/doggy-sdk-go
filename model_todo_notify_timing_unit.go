/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"fmt"
)

// TodoNotifyTimingUnit the model 'TodoNotifyTimingUnit'
type TodoNotifyTimingUnit string

// List of TodoNotifyTimingUnit
const (
	TODONOTIFYTIMINGUNIT_NONE TodoNotifyTimingUnit = "None"
	TODONOTIFYTIMINGUNIT_MINUTE TodoNotifyTimingUnit = "Minute"
	TODONOTIFYTIMINGUNIT_HOUR TodoNotifyTimingUnit = "Hour"
	TODONOTIFYTIMINGUNIT_DAY TodoNotifyTimingUnit = "Day"
	TODONOTIFYTIMINGUNIT_MONTH TodoNotifyTimingUnit = "Month"
	TODONOTIFYTIMINGUNIT_YEAR TodoNotifyTimingUnit = "Year"
	TODONOTIFYTIMINGUNIT_CUSTOM TodoNotifyTimingUnit = "Custom"
)

// All allowed values of TodoNotifyTimingUnit enum
var AllowedTodoNotifyTimingUnitEnumValues = []TodoNotifyTimingUnit{
	"None",
	"Minute",
	"Hour",
	"Day",
	"Month",
	"Year",
	"Custom",
}

func (v *TodoNotifyTimingUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TodoNotifyTimingUnit(value)
	for _, existing := range AllowedTodoNotifyTimingUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TodoNotifyTimingUnit", value)
}

// NewTodoNotifyTimingUnitFromValue returns a pointer to a valid TodoNotifyTimingUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTodoNotifyTimingUnitFromValue(v string) (*TodoNotifyTimingUnit, error) {
	ev := TodoNotifyTimingUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TodoNotifyTimingUnit: valid values are %v", v, AllowedTodoNotifyTimingUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TodoNotifyTimingUnit) IsValid() bool {
	for _, existing := range AllowedTodoNotifyTimingUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TodoNotifyTimingUnit value
func (v TodoNotifyTimingUnit) Ptr() *TodoNotifyTimingUnit {
	return &v
}

type NullableTodoNotifyTimingUnit struct {
	value *TodoNotifyTimingUnit
	isSet bool
}

func (v NullableTodoNotifyTimingUnit) Get() *TodoNotifyTimingUnit {
	return v.value
}

func (v *NullableTodoNotifyTimingUnit) Set(val *TodoNotifyTimingUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableTodoNotifyTimingUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableTodoNotifyTimingUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTodoNotifyTimingUnit(val *TodoNotifyTimingUnit) *NullableTodoNotifyTimingUnit {
	return &NullableTodoNotifyTimingUnit{value: val, isSet: true}
}

func (v NullableTodoNotifyTimingUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTodoNotifyTimingUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

