/*
Doggy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"fmt"
)

// TodoRepeat the model 'TodoRepeat'
type TodoRepeat string

// List of TodoRepeat
const (
	TODOREPEAT_NEVER TodoRepeat = "Never"
	TODOREPEAT_EVERY_DAY TodoRepeat = "EveryDay"
	TODOREPEAT_EVERY_WEEKDAY TodoRepeat = "EveryWeekday"
	TODOREPEAT_EVERY_WORK_DAY TodoRepeat = "EveryWorkDay"
	TODOREPEAT_EVERY_WEEK TodoRepeat = "EveryWeek"
	TODOREPEAT_EVERY_MONTH_THIS_DAY TodoRepeat = "EveryMonthThisDay"
	TODOREPEAT_EVERY_MONTH_THIS_WEEKDAY TodoRepeat = "EveryMonthThisWeekday"
	TODOREPEAT_EVERY_YEAR_THIS_DAY TodoRepeat = "EveryYearThisDay"
	TODOREPEAT_EVERY_YEAR_THIS_LUNAR_DAY TodoRepeat = "EveryYearThisLunarDay"
	TODOREPEAT_CUSTOM TodoRepeat = "Custom"
)

// All allowed values of TodoRepeat enum
var AllowedTodoRepeatEnumValues = []TodoRepeat{
	"Never",
	"EveryDay",
	"EveryWeekday",
	"EveryWorkDay",
	"EveryWeek",
	"EveryMonthThisDay",
	"EveryMonthThisWeekday",
	"EveryYearThisDay",
	"EveryYearThisLunarDay",
	"Custom",
}

func (v *TodoRepeat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TodoRepeat(value)
	for _, existing := range AllowedTodoRepeatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TodoRepeat", value)
}

// NewTodoRepeatFromValue returns a pointer to a valid TodoRepeat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTodoRepeatFromValue(v string) (*TodoRepeat, error) {
	ev := TodoRepeat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TodoRepeat: valid values are %v", v, AllowedTodoRepeatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TodoRepeat) IsValid() bool {
	for _, existing := range AllowedTodoRepeatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TodoRepeat value
func (v TodoRepeat) Ptr() *TodoRepeat {
	return &v
}

type NullableTodoRepeat struct {
	value *TodoRepeat
	isSet bool
}

func (v NullableTodoRepeat) Get() *TodoRepeat {
	return v.value
}

func (v *NullableTodoRepeat) Set(val *TodoRepeat) {
	v.value = val
	v.isSet = true
}

func (v NullableTodoRepeat) IsSet() bool {
	return v.isSet
}

func (v *NullableTodoRepeat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTodoRepeat(val *TodoRepeat) *NullableTodoRepeat {
	return &NullableTodoRepeat{value: val, isSet: true}
}

func (v NullableTodoRepeat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTodoRepeat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

